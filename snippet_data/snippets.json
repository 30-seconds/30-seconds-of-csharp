{
  "data": [
    {
      "id": "All",
      "title": "All",
      "type": "snippet",
      "attributes": {
        "fileName": "All.md",
        "text": "Returns `True` if the provided predicate function returns `True` for all elements in a collection, `False` otherwise.\n\nUse `Array.TrueForAll()` to test if all elements in the collection return `True` based on the predicate function, `match`.\nOmit the predicate function, `match`, to use the overload that checks if each value is different from `null` by default.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool All<T>(T[] arr, Predicate<T> match) \n  {\n    return Array.TrueForAll(arr, match);\n  }\n  public static bool All<T>(T[] arr) \n  {\n    return Array.TrueForAll(arr, val => val != null);\n  }\n}",
          "example": "int[] nums = { 4, 2, 3 };\n\n_30s.All(nums, x => x > 1); // True\n_30s.All(nums); // True"
        },
        "tags": [
          "array",
          "lambda",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "c6044d1f81802fa062b94ca120c3f38356d908aedd47236165ffe873584bdf86",
        "firstSeen": "1576571828",
        "lastUpdated": "1576571828",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "ByteArrayToHex",
      "title": "ByteArrayToHex",
      "type": "snippet",
      "attributes": {
        "fileName": "ByteArrayToHex.md",
        "text": "Converts a `byte` array to its hexadecimal string representation.\n\nUse `BitConverter.ToString()` to convert the `byte` array to a string.\nUse `string.Replace()` to remove dashes in the produced string.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string ByteArrayToHex(byte[] bytes) \n  {\n    return BitConverter.ToString(bytes).Replace(\"-\", \"\");\n  }\n}",
          "example": "byte[] data = { 241, 89, 54 };\n\n_30s.ByteArrayToHex(data); // \"F15936\""
        },
        "tags": [
          "array",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "67fb03f80d82f6737e6f9a44bc271f4b10e4661f03ee9f95be249da0f09e1820",
        "firstSeen": "1577294963",
        "lastUpdated": "1577294963",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Capitalize",
      "title": "Capitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "Capitalize.md",
        "text": "Capitalizes the first letter of a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `chars`.\nUse `char.ToUpper(chars[0])` to capitalize the first letter.\nFinally, return a `new string()` from the `chars` array.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string Capitalize(string str) \n  {\n    char[] chars = str.ToCharArray();\n    chars[0] = char.ToUpper(chars[0]);\n    return new string(chars);\n  }\n}",
          "example": "string s = \"fooBar\";\n\n_30s.Capitalize(s); // \"FooBar\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6e6736b4336748ddfc57d973b0fd51a0e0fff079aaae5684ba4597a08ea362f4",
        "firstSeen": "1576570223",
        "lastUpdated": "1576570223",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Chunk",
      "title": "Chunk",
      "type": "snippet",
      "attributes": {
        "fileName": "Chunk.md",
        "text": "Chunks an array into smaller arrays of a specified size.\n\nUse `IEnumerable.Select()` to convert the given list to index-value pairs.\nUse `IEnumerable.GroupBy()` to split elements into groups based on their index.\nUse `IEnumerable.Select()` a second time to map each group's elements to their values and `IEnumerable.ToList()` to convert the result to a list.\nFinally, use `IEnumerable.ToList()` on the result to convert everything to a list and return it.\nIf the original list can't be split evenly, the final chunk will contain the remaining elements.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static List<List<T>> Chunk<T>(List<T> list, int size)\n  {\n    return list\n      .Select((x, i) => new { Index = i, Value = x })\n      .GroupBy(x => x.Index / size)\n      .Select(x => x.Select(v => v.Value).ToList())\n      .ToList();\n  }\n}",
          "example": "List<int> nums = new List<int>(){ 1, 2, 3, 4, 5 };\n\n_30s.Chunk(nums, 2); // { {1, 2}, {3, 4}, {5} }"
        },
        "tags": [
          "list",
          "lambda",
          "advanced"
        ]
      },
      "meta": {
        "hash": "4b5e3410d1ad58102d284d69b135de6ab0d7a352a2af2a0325ccc44d06600c53",
        "firstSeen": "1576588682",
        "lastUpdated": "1576747041",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "CompactWhitespace",
      "title": "CompactWhitespace",
      "type": "snippet",
      "attributes": {
        "fileName": "CompactWhitespace.md",
        "text": "Returns a string with whitespaces compacted.\n\nUse `Regex.Replace()` with a regular expression to replace all occurences of 2 or more subsequent whitespace characters with a single space.\n\n",
        "codeBlocks": {
          "code": "using System.Text.RegularExpressions;\n\npublic static partial class _30s \n{\n  public static string CompactWhitespace(string str) \n  {\n    return Regex.Replace(str, @\"\\s{2,}\", \" \");\n  }\n}",
          "example": "string s = \"Lorem    ipsum\\n   dolor sit   amet\";\n\n_30s.CompactWhitespace(s); // \"Lorem ipsum dolor sit amet\""
        },
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "598628d7d76e067aa9ac395263c2851d1190c2c4d5c274f45beb499b0f411602",
        "firstSeen": "1576588810",
        "lastUpdated": "1576588810",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "CountOccurences",
      "title": "CountOccurences",
      "type": "snippet",
      "attributes": {
        "fileName": "CountOccurences.md",
        "text": "Counts the occurences of a value in an `IEnumerable`.\n\nUse `IEnumerable.Count()` in combination with `EqualityComparer<T>.Default.Equals()` to compare each value in the `IEnumerable` with `el`.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static int CountOccurences<T>(IEnumerable<T> obj, T el) \n  {\n    return obj.Count(f => EqualityComparer<T>.Default.Equals(f, el));\n  }\n}",
          "example": "string s = \"fooBar\";\nList<int> nums = new List<int>(){ 1, 2, 3, 3, 3, 4, 5, 6 };\n\n_30s.CountOccurences(s,'o'); // 2\n_30s.CountOccurences(nums,3); // 3"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e416d30956587c04825689ab69a33d68fc2690fe2f422debf9fc892e770d7c3b",
        "firstSeen": "1577278755",
        "lastUpdated": "1577279440",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "Decapitalize",
      "title": "Decapitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "Decapitalize.md",
        "text": "Decapitalizes the first letter of a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `chars`.\nUse `char.ToLower(chars[0])` to decapitalize the first letter.\nFinally, return a `new string()` from the `chars` array.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string Decapitalize(string str) \n  {\n    char[] chars = str.ToCharArray();\n    chars[0] = char.ToLower(chars[0]);\n    return new string(chars);\n  }\n}",
          "example": "string s = \"FooBar\";\n\n_30s.Decapitalize(s); // \"fooBar\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6e0f3b18da2fa4e3eec6de9d45e8889b5af803ff36c4e3a85b37d9dafaa36be7",
        "firstSeen": "1576570276",
        "lastUpdated": "1576570276",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "DistinctValues",
      "title": "DistinctValues",
      "type": "snippet",
      "attributes": {
        "fileName": "DistinctValues.md",
        "text": "Returns all distinct values in an array.\n\nUse `Enumerable.Distinct()` to get the distinct values in the given array.\nUse `Enumerable.ToArray()` to convert the result to an array and return it.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static T[] DistinctValues<T>(T[] arr) \n  {\n    return arr.Distinct().ToArray();\n  }\n}",
          "example": "int[] nums =  { 1, 2, 1, 3, 3, 4, 5 };\n\n_30s.DistinctValues(nums); // { 1, 2, 3, 4, 5 }"
        },
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "23d7f6b38ecde3077fb22e65a2aa77642c3dfdb0b8e4e6571f544fe5015155fb",
        "firstSeen": "1576588434",
        "lastUpdated": "1576742363",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "FilterString",
      "title": "FilterString",
      "type": "snippet",
      "attributes": {
        "fileName": "FilterString.md",
        "text": "Filter a string's contents to include only alphanumeric and allowed characters.\n\nUse `string.ToCharArray()` in combination with `Array.FindAll()` to check if each character in the string is alphanumeric or contained in the `filter`.\nOmit the second argument, `filter`, to only allow alphanumeric characters.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string FilterString(string s, string filter = \"\")\n  {\n    return new string(\n      Array.FindAll(s.ToCharArray(), c => char.IsLetterOrDigit(c) || filter.Contains(c))\n    );\n  }\n}",
          "example": "string s = \"@30_seconds_of_code#-$\";\n\n_30s.FilterString(s); // \"30secondsofcode\"\n_30s.FilterString(s,\"_\"); // \"30_seconds_of_code\"\n_30s.FilterString(s,\"_@\"); // \"@30_seconds_of_code\""
        },
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "06cfb76e42df33a38a44ef4e2f232a5b4bb019afb25298d9428d4db935beb84f",
        "firstSeen": "1577297645",
        "lastUpdated": "1577297645",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "GetFirstN",
      "title": "GetFirstN",
      "type": "snippet",
      "attributes": {
        "fileName": "GetFirstN.md",
        "text": "Returns the first `n` elements in an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Take(n)` to get the first `n` elements.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\nOmit the second argument, `n`, to use a default value of `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static IEnumerable<T> GetFirstN<T>(IEnumerable<T> list, int n = 1)\n  {\n    return list.Count() != 0 ? list.Take(n) : default(IEnumerable<T>);\n  }\n}",
          "example": "List<int> nums = new List<int>(){ 1, 2, 3, 4, 5 };\n\n_30s.GetFirstN(nums); // { 1 }\n_30s.GetFirstN(nums, 3); // { 1, 2, 3 }"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c00408502f5bd2f067727d0ab68cded73200c0c64c68b096c0e94eb61795592d",
        "firstSeen": "1577047252",
        "lastUpdated": "1577047252",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "GetLastN",
      "title": "GetLastN",
      "type": "snippet",
      "attributes": {
        "fileName": "GetLastN.md",
        "text": "Returns the last `n` elements in an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Skip(list.Count() - n)` to get the last `n` elements.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\nOmit the second argument, `n`, to use a default value of `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static IEnumerable<T> GetLastN<T>(IEnumerable<T> list, int n = 1)\n  {\n    return list.Count() != 0 ? list.Skip(list.Count() - n) : default(IEnumerable<T>);\n  }\n}",
          "example": "List<int> nums = new List<int>(){ 1, 2, 3, 4, 5 };\n\n_30s.GetLastN(nums); // { 5 }\n_30s.GetLastN(nums, 3); // { 3, 4, 5 }"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8578add19a89ab0c15c79a6030f687362fccca235f86b05393cc673d8c145bf4",
        "firstSeen": "1577047634",
        "lastUpdated": "1577047634",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "GetType",
      "title": "GetType",
      "type": "snippet",
      "attributes": {
        "fileName": "GetType.md",
        "text": "Returns the type of the given object.\n\nUse `typeof()` on the given object's type.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static Type GetType<T>(T obj) \n  {\n    return typeof(T);\n  }\n}",
          "example": "string s = \"fooBar\";\nList<string> list = new List<string>() { \"a\", \"b\", \"c\" };\n\n_30s.GetType(s); // System.String\n_30s.GetType(list); // System.Collections.Generic.List`1[System.String]"
        },
        "tags": [
          "type",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "229825e3b5d2a4ffd29cb3adc18aa2d51a8eb10c037eb28a6632fef89105c941",
        "firstSeen": "1577278779",
        "lastUpdated": "1577278779",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Head",
      "title": "Head",
      "type": "snippet",
      "attributes": {
        "fileName": "Head.md",
        "text": "Returns the head of an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Take(1)` to get the first element, `IEnumerable.ToArray()[0]` to convert to array and return the element.\nIf the enumerable object is empty, return the `default()` value for the given type.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static T Head<T>(IEnumerable<T> list) \n  {\n    return list.Count() != 0 ? list.Take(1).ToArray()[0] : default(T);\n  }\n}",
          "example": "List<int> nums = new List<int>(){ 1, 2, 3, 4, 5 };\nList<int> empty = new List<int>(){ };\nchar[] chars = {'A','B','C'};\n\n_30s.Head(nums); // 1\n_30s.Head(empty); // 0\n_30s.Head(chars); // 'A'"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "014c9c4ff5672a67a24dc3096071ecc9441a85c9a16bf3eac6fa5ebdf3097ef1",
        "firstSeen": "1577045234",
        "lastUpdated": "1577050262",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "HexToByteArray",
      "title": "HexToByteArray",
      "type": "snippet",
      "attributes": {
        "fileName": "HexToByteArray.md",
        "text": "Converts a hexadecimal string to a `byte` array.\n\nUse `Enumerable.Range()` in combination with `string.Length` to get the indices of the given string in an array.\nUse `Enumerable.Where()` to get only the even indices in the previous range.\nUse `Enumerable.Select()` in combination with `Convert.ToByte()` and `string.Substring()` to convert each byte's hex code to a `byte`.\nFinally, use `Enumerable.ToArray()` to return a `byte[]`.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static byte[] HexToByteArray(string hex)\n  {\n    return Enumerable.Range(0, hex.Length)\n      .Where(x => x % 2 == 0)\n      .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))\n      .ToArray();\n  }\n}",
          "example": "_30s.HexToByteArray(\"F15936\"); // { 241, 89, 54 }"
        },
        "tags": [
          "string",
          "utility",
          "advanced"
        ]
      },
      "meta": {
        "hash": "804a476d856f46835e8d5fa36c3b799e8b483679cf514f1d967e319ff47187f8",
        "firstSeen": "1577294976",
        "lastUpdated": "1577294976",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Initialize2DArray",
      "title": "Initialize2DArray",
      "type": "snippet",
      "attributes": {
        "fileName": "Initialize2DArray.md",
        "text": "Initializes a 2D array of the given width, height and value.\n\nUse `Enumerable.Repeat()` to repeat `value` `width` times, convert to an array and repeat `height` times using the same method.\nUse `IEnumerable.Select()` and `IEnumerable.First()` to convert the jagged array to a 2D array.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static T[,] Initialize2DArray<T> (int width, int height, T value) \n  {\n    return new[] { new T [height, width] }\n      .Select(_ => new { x = _, y = Enumerable.Repeat(\n          Enumerable.Repeat(value, width).ToArray(), height\n        )\n        .ToArray()\n        .Select((a, ia) => a.Select((b, ib) => _[ia, ib] = b).Count()).Count() }\n      )\n      .Select(_ => _.x)\n      .First();\n  }\n}",
          "example": "_30s.Initialize2DArray(2, 3, 5); // { {5, 5}, {5, 5}, {5, 5} }"
        },
        "tags": [
          "array",
          "utility",
          "advanced"
        ]
      },
      "meta": {
        "hash": "db9f2c7e764584ee9f1fc568aadeb80552f1f805e5a88fae4232e8dd0e9becc5",
        "firstSeen": "1577701612",
        "lastUpdated": "1577727939",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "IsA",
      "title": "IsA",
      "type": "snippet",
      "attributes": {
        "fileName": "IsA.md",
        "text": "Returns `True` if the given object is of the specified type, `False` otherwise.\n\nUse the `is` operator to check if `obj` is of the given type, `T`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsA<T>(object obj) \n  {\n    return obj is T;\n  }\n}",
          "example": "string s = \"fooBar\";\n\n_30s.IsA<string>(s); // True\n_30s.IsA<int>(s); // False"
        },
        "tags": [
          "type",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e3f3e3d7d0d7dee8870c77aa376d36ab17c08b8f55b8f7a253ad7002a1308189",
        "firstSeen": "1577278798",
        "lastUpdated": "1577278798",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsDouble",
      "title": "IsDouble",
      "type": "snippet",
      "attributes": {
        "fileName": "IsDouble.md",
        "text": "Returns `True` if the given string can be parsed into a double, `False` otherwise.\n\nReturn the result of calling `Double.TryParse()` with `NymberStyles.Float` for the given `num` string.\n\n",
        "codeBlocks": {
          "code": "using System.Globalization;\n\npublic static partial class _30s \n{\n  public static bool IsDouble(string num) \n  {\n    Double _ = 0.0;\n    return Double.TryParse(num, NumberStyles.Float, NumberFormatInfo.CurrentInfo, out _);\n  }\n}",
          "example": "_30s.IsDouble(\"2\"); // True\n_30s.IsDouble(\"hi\"); // False"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "97f3c210b542d4aae691e66f78f7d630352470be67f8e176074285e4abc323d2",
        "firstSeen": "1576587842",
        "lastUpdated": "1576587842",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsEven",
      "title": "IsEven",
      "type": "snippet",
      "attributes": {
        "fileName": "IsEven.md",
        "text": "Returns `True` if the given number is even, `False` otherwise.\n\nCheck whether a number is odd or even using the modulo (`%`) operator. \nReturn `True` if the number is even, `False` if the number is odd.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsEven(int n) \n  {\n    return n % 2 == 0;\n  }\n}",
          "example": "_30s.IsEven(2); // True\n_30s.IsEven(3); // False"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "cdc43c7f86e5f20a93a4f1ab39dc9f67de019ad67d4d8cdaae094dca62d22f49",
        "firstSeen": "1576570816",
        "lastUpdated": "1576570816",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsInteger",
      "title": "IsInteger",
      "type": "snippet",
      "attributes": {
        "fileName": "IsInteger.md",
        "text": "Returns `True` if the given string can be parsed into an integer, `False` otherwise.\n\nReturn the result of calling `Double.TryParse()` with `NymberStyles.Integer` for the given `num` string.\nUse `Double.TryParse()` to allow handling of values larger than `Int64`.\n\n",
        "codeBlocks": {
          "code": "using System.Globalization;\n\npublic static partial class _30s \n{\n  public static bool IsInteger(string num) \n  {\n    Double _ = 0.0;\n    return Double.TryParse(num, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out _);\n  }\n}",
          "example": "_30s.IsInteger(\"2\"); // True\n_30s.IsInteger(\"3.1\"); // False"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2b53765c77a81a4a249cad4654cffbac84b6392da16ccce450ca854c5c0ce3e4",
        "firstSeen": "1576587836",
        "lastUpdated": "1576587836",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsLower",
      "title": "IsLower",
      "type": "snippet",
      "attributes": {
        "fileName": "IsLower.md",
        "text": "Checks if a string is lower case.\n\nConvert the given string to lower case, using  `string.ToLower()`  and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsLower(string str) \n  {\n    return str.ToLower() == str;\n  }\n}",
          "example": "string s1 = \"abc\";\nstring s2 = \"cDe\";\n\n_30s.IsLower(s1); // True\n_30s.IsLower(s2); // False"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "017f5bf87114fe1b469aea3199b8ba47fc70ac1671c131f50792b69cf3c93746",
        "firstSeen": "1576571006",
        "lastUpdated": "1576571006",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsNotA",
      "title": "IsNotA",
      "type": "snippet",
      "attributes": {
        "fileName": "IsNotA.md",
        "text": "Returns `True` if the given object is not of the specified type, `False` otherwise.\n\nUse the `is` operator to check if `obj` is not of the given type, `T`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsNotA<T>(object obj) \n  {\n    return !(obj is T);\n  }\n}",
          "example": "string s = \"fooBar\";\n\n_30s.IsNotA<string>(s); // False\n_30s.IsNotA<int>(s); // True"
        },
        "tags": [
          "type",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "69eb40555c39d919cd23f60bbc5c7b29cc6a814483671cfafd4251b83822a694",
        "firstSeen": "1577278815",
        "lastUpdated": "1577278815",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsOdd",
      "title": "IsOdd",
      "type": "snippet",
      "attributes": {
        "fileName": "IsOdd.md",
        "text": "Returns `True` if the given number is odd, `False` otherwise.\n\nCheck whether a number is odd or even using the modulo (`%`) operator. \nReturn `True` if the number is odd, `False` if the number is even.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsOdd(int n) \n  {\n    return n % 2 != 0;\n  }\n}",
          "example": "_30s.IsOdd(3); // True\n_30s.IsOdd(4); // False"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ee44e92a52fd0cb8d558318111c2ef19e6d39fbf159d5682b5ed8571348ef1db",
        "firstSeen": "1576570824",
        "lastUpdated": "1576570824",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsPowerOfTwo",
      "title": "IsPowerOfTwo",
      "type": "snippet",
      "attributes": {
        "fileName": "IsPowerOfTwo.md",
        "text": "Returns `True` if the given number is a power of `2`, `False` otherwise.\n\nUse the bitwise binary AND operator (`&`) to determine if `n` is a power of `2`.\nAdditionally, check that `n` is different from `0`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsPowerOfTwo(ulong n) \n  {\n    return (n != 0) && ((n & (n - 1)) == 0);\n  }\n}",
          "example": "_30s.IsPowerOfTwo(0); // False\n_30s.IsPowerOfTwo(1); // True\n_30s.IsPowerOfTwo(8); // True"
        },
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "48bd0fd976b443a4d7434ed4878e8ece7d69a3a13619cfc154d7a75e24f2309c",
        "firstSeen": "1577278834",
        "lastUpdated": "1577278834",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IsUpper",
      "title": "IsUpper",
      "type": "snippet",
      "attributes": {
        "fileName": "IsUpper.md",
        "text": "Checks if a string is upper case.\n\nConvert the given string to upper case, using  `string.ToUpper()`  and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsUpper(string str) \n  {\n    return str.ToUpper() == str;\n  }\n}",
          "example": "string s1 = \"ABC\";\nstring s2 = \"cDe\";\n\n_30s.IsUpper(s1); // True\n_30s.IsUpper(s2); // False"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "638d82a9fbbcf1b98a76dbc754f1043898e08448fe652b2e4c4ecf7c04f90b7b",
        "firstSeen": "1576571048",
        "lastUpdated": "1576571048",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Mask",
      "title": "Mask",
      "type": "snippet",
      "attributes": {
        "fileName": "Mask.md",
        "text": "Replaces all but the last `n` characters in a string with the specified `mask` character.\n\nUse `string.Substring()` to get the last `n` characters of the passed string, `str`.\nUse `string.PadLeft()` to add as many `mask` characters as necessary to the start of the string to return a string of the same length.\nOmit the third argument, `mask`, to use a default character of `'*'`.\nOmit the second argument, `n`, to keep a default of `4` characters unmasked.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string Mask(string str, int n = 4, char mask = '*') \n  {\n    return str.Substring(str.Length - n).PadLeft(str.Length, mask);\n  }\n}",
          "example": "string s = \"1234567890\";\n\n_30s.Mask(s); // \"******7890\"\n_30s.Mask(s, 3); // \"*******890\"\n_30s.Mask(s, 2, '/$'); // \"$$$$$$$$90\""
        },
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9c469a03a2325eba95f39d919a8e4a0cbe7e5e6d849e772067368e04f4d4a425",
        "firstSeen": "1576588260",
        "lastUpdated": "1576742322",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "MaxDateTime",
      "title": "MaxDateTime",
      "type": "snippet",
      "attributes": {
        "fileName": "MaxDateTime.md",
        "text": "Returns the maximum of two `DateTime` values.\n\nUse the conditional operator (`?:`) to return the maximum of the two values.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime MaxDateTime(DateTime d1, DateTime d2) \n  {\n    return (d1 > d2) ? d1 : d2;\n  }\n}",
          "example": "DateTime d1 = new DateTime(DateTime.MaxValue.Ticks);\nDateTime d2 = new DateTime(DateTime.MinValue.Ticks);\n\n_30s.MaxDateTime(d1, d2); // 12/31/9999 11:59:59 PM"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8052e3922028cb52cc0737402a13b27a277587374c00fe928bc379dd0489ce97",
        "firstSeen": "1576588060",
        "lastUpdated": "1576742823",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "Median",
      "title": "Median",
      "type": "snippet",
      "attributes": {
        "fileName": "Median.md",
        "text": "Finds the median of a list of numbers.\n\nUse the `params` keyword to accept either an array or a variable number of arguments.\nSort the array using `Array.sort()` and find the median. \nWhich is either the middle element of the list, if the list length is odd or the average of the two middle elements, if the list length is even.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static double Median (params double[] values) {\n    Array.Sort(values);\n    if (values.Length % 2 == 0)\n      return (values[values.Length / 2 - 1] + values[values.Length / 2]) / 2;\n    return (double)values[values.Length / 2];\n  }\n}",
          "example": "double [] nums = { 5, 6, 7, 8 };\n\n_30s.Median(4, 8, 1); // 4\n_30s.Median(nums); // 6.5"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "36ad6e587f9de3d589119ea0dc61c59c490a88caab192e8da895ada709f20684",
        "firstSeen": "1577702621",
        "lastUpdated": "1577728899",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "MinDateTime",
      "title": "MinDateTime",
      "type": "snippet",
      "attributes": {
        "fileName": "MinDateTime.md",
        "text": "Returns the minimum of two `DateTime` values.\n\nUse the conditional operator (`?:`) to return the minimum of the two values.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime MinDateTime(DateTime d1, DateTime d2) \n  {\n    return (d1 < d2) ? d1 : d2;\n  }\n}",
          "example": "DateTime d1 = new DateTime(DateTime.MaxValue.Ticks);\nDateTime d2 = new DateTime(DateTime.MinValue.Ticks);\n\n_30s.MinDateTime(d1, d2); // 1/1/0001 12:00:00 AM"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c39e58af84153f01abf9f57262cd67d2431cc553399eb360e9b0741261c58a93",
        "firstSeen": "1576588054",
        "lastUpdated": "1576742838",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "MostFrequent",
      "title": "MostFrequent",
      "type": "snippet",
      "attributes": {
        "fileName": "MostFrequent.md",
        "text": "Returns the most frequent element of an `IEnumerable`.\n\nUse `IEnumerable.GroupBy()` to group `values` by value.\nUse `IEnumerable.OrderByDescending()` in combination with `Enumerable.Count()` to order the results in descending order based on frequency.\nUse `IEnumerable.First()` to get the first element and return its `Key` property, which corresponds to the element's value.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static T MostFrequent<T> (IEnumerable<T> values) {\n    return values\n      .GroupBy(v => v)\n      .OrderByDescending(v => v.Count())\n      .First()\n      .Key;\n  }\n}",
          "example": "int [] nums = { 1, 2, 3, 3, 2, 3 };\nList<string> str = new List<string> { \"a\", \"b\", \"b\", \"c\" };\n\n_30s.MostFrequent(nums); // 3\n_30s.MostFrequent(str); // \"b\""
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "f55d7e9928ecf8a4a1bdcea0da1cc65e1c8fa241996134b077dcaf1a014d0da9",
        "firstSeen": "1577704578",
        "lastUpdated": "1577704578",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "None",
      "title": "None",
      "type": "snippet",
      "attributes": {
        "fileName": "None.md",
        "text": "Returns `True` if the provided predicate function returns `False` for all elements in a collection, `False` otherwise.\n\nUse `Array.Exists()` to test if all elements in the collection return `False` based on the predicate function, `match`.\nOmit the predicate function, `match`, to use the overload that checks if each value is `null` by default.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool None<T>(T[] arr, Predicate<T> match) \n  {\n    return !Array.Exists(arr, match);\n  }\n  public static bool None<T>(T[] arr) \n  {\n    return Array.Exists(arr, val => val == null);\n  }\n}",
          "example": "int[] nums = { 4, 2, 3 };\n\n_30s.None(nums, x => x < 0); // True\n_30s.None(nums); // False"
        },
        "tags": [
          "array",
          "lambda",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8c7a1751ce92f61972e334db3791d736dd052dd90e3b40d576f264c9a8991f6c",
        "firstSeen": "1576571834",
        "lastUpdated": "1576571834",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "PadNumber",
      "title": "PadNumber",
      "type": "snippet",
      "attributes": {
        "fileName": "PadNumber.md",
        "text": "Pads a given number to the specified `length`.\n\nUse `Int32.ToString()` with an appropriate format specifier, produced using string interpolation.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string PadNumber(int n, int length)\n  {\n    return n.ToString($\"D{length}\");\n  }\n}",
          "example": "_30s.PadNumber(1234,6); // \"001234\""
        },
        "tags": [
          "string",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8d7933f298a3879af003418959a66b5d9352170e60db91c3f60c9383e1947ede",
        "firstSeen": "1577299654",
        "lastUpdated": "1577299654",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Repeat",
      "title": "Repeat",
      "type": "snippet",
      "attributes": {
        "fileName": "Repeat.md",
        "text": "Creates a new string by repeating the given string `n` times.\n\nUse `Enumerable.Repeat()` to repeat `s` `n` times, `string.Concat()` to convert the result to a `string`.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static string Repeat(string s, int n)\n  {\n    return string.Concat(Enumerable.Repeat(s, n));\n  }\n}",
          "example": "_30s.Repeat(\"Ha\",5); // \"HaHaHaHaHa\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "70e7982d16309005ea8218b60659eb2003dd9685b970dd17b257b9b885441be2",
        "firstSeen": "1577298772",
        "lastUpdated": "1577298772",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Reverse",
      "title": "Reverse",
      "type": "snippet",
      "attributes": {
        "fileName": "Reverse.md",
        "text": "Reverses a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `Array.Reverse()` to reverse the array.\nUse `IEnumerable.ToArray()` to create an array of `char` and pass it to a `new string()`.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static void Reverse(string s) \n  {\n    return new string(s.ToCharArray().Reverse().ToArray());\n  }\n}",
          "example": "string s = \"Hello World\";\n\n_30s.Reverse(s); // \"dlroW olleH\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e79c14b00d42af188414b6a8642f62f4820e716927e2722181b01bb612184aaf",
        "firstSeen": "1577278851",
        "lastUpdated": "1577278851",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Shuffle",
      "title": "Shuffle",
      "type": "snippet",
      "attributes": {
        "fileName": "Shuffle.md",
        "text": "Randomizes the order of the values of an `IList`, updating the original `IList` object.\n\nUse the [Fisher-Yates algorithm](\nhttps://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Fisher_and_Yates%27_original_method) to reorder the elements of the given `IList` object.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static void Shuffle<T>(IList<T> list)\n  {\n    Random rand = new Random();\n    for (int n = list.Count() - 1 ; n > 0 ; n--)\n    {\n      int k = rand.Next(n + 1);\n      T value = list[k];\n      list[k] = list[n];\n      list[n] = value;\n    }\n  }\n}",
          "example": "List<int> nums = new List<int>(){ 1, 2, 3, 4, 5, 6 };\nint[] arr = { 1, 2, 3, 4, 5, 6 };\n\n_30s.Shuffle(nums); // nums = { 3, 5, 2, 1, 4, 6 }\n_30s.Shuffle(arr); // arr = { 6, 2, 5, 1, 4, 3 }"
        },
        "tags": [
          "list",
          "array",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "787070230c11fcce2e124507fade7a887e048b3d696a201bf509d16921fa70e8",
        "firstSeen": "1577050162",
        "lastUpdated": "1577050162",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "SplitLines",
      "title": "SplitLines",
      "type": "snippet",
      "attributes": {
        "fileName": "SplitLines.md",
        "text": "Splits a multiline string into an array of lines.\n\nUse `string.Split()` with all forms of the newline separator to split the string into an array of strings.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string[] SplitLines(string s)\n  {\n    return s.Split(new[] { \"\\r\\n\", \"\\r\", \"\\n\" }, StringSplitOptions.None);\n  }\n}",
          "example": "string s = \"This\\nis a\\nmultiline\\nstring.\\n\";\n\n_30s.SplitLines(s); // {\"This\", \"is a\", \"multiline\", \"string.\" , \"\"}"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c087d30e60ecacd0162674cef0d197a8dda8ef980c4268df031b2b3a8f8bb2dd",
        "firstSeen": "1577298283",
        "lastUpdated": "1577298283",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "SplitStringBy",
      "title": "SplitStringBy",
      "type": "snippet",
      "attributes": {
        "fileName": "SplitStringBy.md",
        "text": "Splits a string into an array of strings using a multicharacter (string) separator.\n\nUse `string.Split()` with the given `separator` to split the string into an array of strings.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string[] SplitStringBy(string s, string separator) \n  {\n    return s.Split(new[] {separator}, StringSplitOptions.None);\n  }\n}",
          "example": "string s = \"Apples--oranges--pears\";\n\n_30s.SplitStringBy(s,\"--\"); // {Apples, oranges, pears}"
        },
        "tags": [
          "string",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "85b5a86433c25b8a5c1d3429dde3a36c03f0cab77c489d9f30b6233d0e3aecad",
        "firstSeen": "1577294370",
        "lastUpdated": "1577294370",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Stringify",
      "title": "Stringify",
      "type": "snippet",
      "attributes": {
        "fileName": "Stringify.md",
        "text": "Combines the elements of an enumerable object into a string.\n\nUse `string.Join()` to combine all elements in the `IEnumerable` into a `string`, using `delimiter`.\nOmit the second argument, `delimiter`, to use the default delimiter of `\",\"`.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string Stringify<T> (IEnumerable<T> elements, string delimiter = \",\") \n  {\n    return string.Join(delimiter, elements);\n  }\n}",
          "example": "IList<string> s = new List<string> {\"a\", \"b\", \"c\"};\nint[] n = {1, 2, 3};\n\n_30s.Stringify(s); // \"a,b,c\"\n_30s.Stringify(n, \" \"); // \"1 2 3\""
        },
        "tags": [
          "utility",
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "45df41ece158c680c9623ac822578976c526ce96a027f1d74bf62dbeddaecd7f",
        "firstSeen": "1576698679",
        "lastUpdated": "1577045822",
        "updateCount": 4,
        "authorCount": 4
      }
    },
    {
      "id": "Subarray",
      "title": "Subarray",
      "type": "snippet",
      "attributes": {
        "fileName": "Subarray.md",
        "text": "Returns a subarray of the given array starting at the given index and having the specified length.\n\nUse `ArraySegment()` with the given array, `arr`, `start` and `length` to get the subarray.\nConvert the result to an array, using `ArraySegment.ToArray()`.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static T[] Subarray<T> (T[] arr, int start, int length) \n  {\n    return new ArraySegment<T>( arr, start, length ).ToArray();\n  }\n}",
          "example": "int[] nums = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n_30s.Subarray(nums,3,6); // {3, 4, 5, 6, 7, 8}"
        },
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "9d3d9ac579ead5497ce7230af2374446035dcdbcdd86e6720a4a066cdab59331",
        "firstSeen": "1577296269",
        "lastUpdated": "1577296269",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Swap",
      "title": "Swap",
      "type": "snippet",
      "attributes": {
        "fileName": "Swap.md",
        "text": "Swaps the values of two variables of the same type.\n\nPass both values by reference using the `ref` keyword, then use a `temp` variable to swap their values.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static void Swap<T> (ref T val1, ref T val2) \n  {\n    var temp = val1;\n    val1 = val2;\n    val2 = temp;\n  }\n}",
          "example": "string a = \"Ipsum\";\nstring b = \"Lorem\";\n\n_30s.Swap(ref a, ref b); // a = \"Lorem\", b = \"Ipsum\""
        },
        "tags": [
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "22bf5dfd734ebeea4868687cf82f7f63e612a95b95372abd37d7e76df04132d4",
        "firstSeen": "1576588339",
        "lastUpdated": "1576588339",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Tail",
      "title": "Tail",
      "type": "snippet",
      "attributes": {
        "fileName": "Tail.md",
        "text": "Returns the tail of an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Skip(1)` to get the whole object except for the first element.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> Tail<T>(IEnumerable<T> list) \n  {\n    return list.Count() != 0 ? list.Skip(1) : default(IEnumerable<T>);\n  }\n}",
          "example": "List<int> nums = new List<int>(){ 1, 2, 3, 4, 5 };\nchar[] chars = {'A','B','C'};\n\n_30s.Tail(nums); // { 2, 3, 4, 5 }\n_30s.Tail(chars); // {'B','C'}"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f706c3ae89aac3d3605dcbaec88f05df0307e39dccbf52c253a7bde1f810bb41",
        "firstSeen": "1577046323",
        "lastUpdated": "1577050262",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "Tomorrow",
      "title": "Tomorrow",
      "type": "snippet",
      "attributes": {
        "fileName": "Tomorrow.md",
        "text": "Returns tomorrow's `DateTime` value.\n\nUse `DateTime.Now` to get the current date, then use `DateTime.AddDays(1)` to increment by `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime Tomorrow() \n  {\n    return DateTime.Now.AddDays(1);\n  }\n}",
          "example": "_30s.Tomorrow(); // 12/22/2019 11:00:49 AM (if it's 12/21/2019 11:00:49 AM)"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8e45c27d173cec524bf003c180a9dff03dc99b7533402c1abdca717cdc23eb17",
        "firstSeen": "1576572220",
        "lastUpdated": "1576572220",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Yesterday",
      "title": "Yesterday",
      "type": "snippet",
      "attributes": {
        "fileName": "Yesterday.md",
        "text": "Returns yesterday's `DateTime` value.\n\nUse `DateTime.Now` to get the current date, then use `DateTime.AddDays(-1)` to decrement by `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime Yesterday() \n  {\n    return DateTime.Now.AddDays(-1);\n  }\n}",
          "example": "_30s.Yesterday(); // 12/20/2019 11:00:49 AM (if it's 12/21/2019 11:00:49 AM)"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "01a571b15be333f136b4b28634ed1732688a9b2a4184d04ce9989c0ec30d7b44",
        "firstSeen": "1576572213",
        "lastUpdated": "1576572213",
        "updateCount": 2,
        "authorCount": 2
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetArray",
    "language": {
      "short": "csharp",
      "long": "C#"
    }
  }
}