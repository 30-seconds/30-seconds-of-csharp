{
  "data": [
    {
      "id": "All",
      "title": "All",
      "type": "snippet",
      "attributes": {
        "fileName": "All.md",
        "text": "Returns `true` if the provided predicate function returns `true` for all elements in a collection, `false` otherwise.\n\nUse `IEnumerable.ToArray()`, `Array.TrueForAll()` to test if all elements in the collection return `true` based on the predicate function, `match`.\nOmit the predicate function, `match`, to use the overload that checks if each value is different from `null` by default.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static bool All<T>(IEnumerable<T> data, Predicate<T> match) \n  {\n    return Array.TrueForAll(data.ToArray(), match);\n  }\n  public static bool All<T>(IEnumerable<T> data) \n  {\n    return Array.TrueForAll(data.ToArray(), val => val != null);\n  }\n}",
          "example": "int[] nums = { 4, 2, 3 };\n\n_30s.All(nums, x => x > 1); // true\n_30s.All(nums); // true"
        },
        "tags": [
          "array",
          "list",
          "lambda",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "ecbb11125281c1f8e93ef9cd891a3cedd7d76c8d8374dd74a747f9d14334e532",
        "firstSeen": "1576571828",
        "lastUpdated": "1578750050",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "AverageBy",
      "title": "AverageBy",
      "type": "snippet",
      "attributes": {
        "fileName": "AverageBy.md",
        "text": "Returns the average of a collection, after mapping each element to a value using the provided function.\n\nUse `IEnumerable.Select()` to map each element to the value returned by the provided selector function, `fn`.\nUse `IEnumerable.Average()` to get the average of the resulting values.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static double AverageBy<T>(IEnumerable<T> values, Func<T,int> fn) \n  {\n    return values.Select(fn).Average();\n  }\n}",
          "example": "var p = new [] {\n  new { a = 3, b = 2},\n  new { a = 2, b = 1}\n};\n\n_30s.AverageBy(p, v => v.a); // 2.5\n_30s.AverageBy(p, v => v.b); // 1.5"
        },
        "tags": [
          "math",
          "list",
          "array",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "7e6932bc3d68dfc1b8d09ae1951bb64e64425966bc6b673f63e2a6b4fe9b6a4b",
        "firstSeen": "1577708404",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "Bifurcate",
      "title": "Bifurcate",
      "type": "snippet",
      "attributes": {
        "fileName": "Bifurcate.md",
        "text": "Splits values into two groups. \nIf an element in `filter` is `true`, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.\n\nUse `IEnumerable.Where()` to separate values into two groups and assign them to the two passed `out` arrays.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static void Bifurcate<T>(IEnumerable<T> items, IList<bool> filter, out T[] filteredTrue, out T[] filteredFalse)\n  {\n    filteredTrue = items.Where((val, i) => filter[i] == true).ToArray();\n    filteredFalse = items.Where((val, i) => filter[i] == false).ToArray();\n  }\n}",
          "example": "int[] nums = {1, 2, 3, 4};\nbool[] filter = {true, true, false, true};\nint[] n1;\nint[] n2;\n\n_30s.Bifurcate(nums, filter, out n1, out n2); // // n1 = {1, 2, 4}, n2 = {3}"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "5c018d71465f81bf825ff91d0c5ce2d905d5f6b9e27c07b238fa4675ffa258b3",
        "firstSeen": "1578310519",
        "lastUpdated": "1578925388",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "BifurcateBy",
      "title": "BifurcateBy",
      "type": "snippet",
      "attributes": {
        "fileName": "BifurcateBy.md",
        "text": "Splits values into two groups according to a predicate function, which specifies which group an element in the input collection belongs to. \nIf the predicate function returns a truthy value, the collection element belongs to the first group; otherwise, it belongs to the second group.\n\nUse `IEnumerable.Where()` to separate values into two groups and assign them to the two passed `out` arrays.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static void BifurcateBy<T>(IEnumerable<T> items, Predicate<T> filter, out T[] filteredTrue, out T[] filteredFalse)\n  {\n    filteredTrue = items.Where(i => filter(i) == true).ToArray();\n    filteredFalse = items.Where(i => filter(i) == false).ToArray();\n  }\n}",
          "example": "int[] nums = {1, 2, 3, 4};\nint[] n1;\nint[] n2;\n\n_30s.BifurcateBy(nums, x => x % 2 == 0, out n1, out n2); // n1 = {2, 4}, n2 = {1, 3}"
        },
        "tags": [
          "array",
          "list",
          "lambda",
          "advanced"
        ]
      },
      "meta": {
        "hash": "0914b9cfc3ec08299ece93e76770a2db0c26c400bd2324b4d3eb77cae5657b8f",
        "firstSeen": "1578310595",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "ByteArrayToHex",
      "title": "ByteArrayToHex",
      "type": "snippet",
      "attributes": {
        "fileName": "ByteArrayToHex.md",
        "text": "Converts a `byte` array to its hexadecimal string representation.\n\nUse `BitConverter.ToString()` to convert the `byte` array to a string.\nUse `string.Replace()` to remove dashes in the produced string.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string ByteArrayToHex(byte[] bytes) \n  {\n    return BitConverter.ToString(bytes).Replace(\"-\", \"\");\n  }\n}",
          "example": "byte[] data = { 241, 89, 54 };\n\n_30s.ByteArrayToHex(data); // \"F15936\""
        },
        "tags": [
          "array",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "67fb03f80d82f6737e6f9a44bc271f4b10e4661f03ee9f95be249da0f09e1820",
        "firstSeen": "1577294963",
        "lastUpdated": "1577294963",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Capitalize",
      "title": "Capitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "Capitalize.md",
        "text": "Capitalizes the first letter of a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `chars`.\nUse `char.ToUpper(chars[0])` to capitalize the first letter.\nFinally, return a `new string()` from the `chars` array.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string Capitalize(string str) \n  {\n    char[] chars = str.ToCharArray();\n    chars[0] = char.ToUpper(chars[0]);\n    return new string(chars);\n  }\n}",
          "example": "string s = \"fooBar\";\n\n_30s.Capitalize(s); // \"FooBar\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6e6736b4336748ddfc57d973b0fd51a0e0fff079aaae5684ba4597a08ea362f4",
        "firstSeen": "1576570223",
        "lastUpdated": "1576570223",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Chunk",
      "title": "Chunk",
      "type": "snippet",
      "attributes": {
        "fileName": "Chunk.md",
        "text": "Chunks a collection into smaller lists of a specified size.\n\nUse `IEnumerable.Select()` to convert the given list to index-value pairs.\nUse `IEnumerable.GroupBy()` to split elements into groups based on their index.\nUse `IEnumerable.Select()` a second time to map each group's elements to their values and `IEnumerable.ToList()` to convert the result to a list.\nFinally, use `IEnumerable.ToList()` on the result to convert everything to a list and return it.\nIf the original list can't be split evenly, the final chunk will contain the remaining elements.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static List<List<T>> Chunk<T>(IEnumerable<T> data, int size)\n  {\n    return data\n      .Select((x, i) => new { Index = i, Value = x })\n      .GroupBy(x => x.Index / size)\n      .Select(x => x.Select(v => v.Value).ToList())\n      .ToList();\n  }\n}",
          "example": "List<int> nums = new List<int> { 1, 2, 3, 4, 5 };\n\n_30s.Chunk(nums, 2); // { {1, 2}, {3, 4}, {5} }"
        },
        "tags": [
          "array",
          "list",
          "lambda",
          "advanced"
        ]
      },
      "meta": {
        "hash": "dd83fcf9dda4cc70d82cea4a21e29c8deefbe0b7daada66cffbeaa61f41c8542",
        "firstSeen": "1576588682",
        "lastUpdated": "1578925388",
        "updateCount": 6,
        "authorCount": 3
      }
    },
    {
      "id": "CompactWhitespace",
      "title": "CompactWhitespace",
      "type": "snippet",
      "attributes": {
        "fileName": "CompactWhitespace.md",
        "text": "Returns a string with whitespaces compacted.\n\nUse `Regex.Replace()` with a regular expression to replace all occurences of 2 or more subsequent whitespace characters with a single space.\n\n",
        "codeBlocks": {
          "code": "using System.Text.RegularExpressions;\n\npublic static partial class _30s \n{\n  public static string CompactWhitespace(string str) \n  {\n    return Regex.Replace(str, @\"\\s{2,}\", \" \");\n  }\n}",
          "example": "string s = \"Lorem    ipsum\\n   dolor sit   amet\";\n\n_30s.CompactWhitespace(s); // \"Lorem ipsum dolor sit amet\""
        },
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "598628d7d76e067aa9ac395263c2851d1190c2c4d5c274f45beb499b0f411602",
        "firstSeen": "1576588810",
        "lastUpdated": "1576588810",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "CountOccurences",
      "title": "CountOccurences",
      "type": "snippet",
      "attributes": {
        "fileName": "CountOccurences.md",
        "text": "Counts the occurences of a value in a collection.\n\nUse `IEnumerable.Count()` in combination with `EqualityComparer<T>.Default.Equals()` to compare each value in the `IEnumerable` with `el`.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static int CountOccurences<T>(IEnumerable<T> obj, T el) \n  {\n    return obj.Count(f => EqualityComparer<T>.Default.Equals(f, el));\n  }\n}",
          "example": "string s = \"fooBar\";\nList<int> nums = new List<int> { 1, 2, 3, 3, 3, 4, 5, 6 };\n\n_30s.CountOccurences(s,'o'); // 2\n_30s.CountOccurences(nums,3); // 3"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "5055c097847a619b2cba72811c8c352b41ea19e9f0dc32e90e934a6f03ee9ea0",
        "firstSeen": "1577278755",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "DayOfTheWeek",
      "title": "DayOfTheWeek",
      "type": "snippet",
      "attributes": {
        "fileName": "DayOfTheWeek.md",
        "text": "Returns the string representation of the weekday for the given `DateTime`.\n\nUse `DateTime.ToString()` with an appropriate format modifier to return the day of the week.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string DayOfTheWeek(DateTime date) \n  {\n    return date.ToString(\"dddd\");  \n  }\n}",
          "example": "_30s.DayOfTheWeek(new DateTime(2020, 1, 15)); // \"Wednesday\""
        },
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "7cb211a7085714f4e5d405c793a10c5410ea1db6ae29ad57a0eea5b4f65032de",
        "firstSeen": "1578312313",
        "lastUpdated": "1578312313",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Decapitalize",
      "title": "Decapitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "Decapitalize.md",
        "text": "Decapitalizes the first letter of a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `chars`.\nUse `char.ToLower(chars[0])` to decapitalize the first letter.\nFinally, return a `new string()` from the `chars` array.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string Decapitalize(string str) \n  {\n    char[] chars = str.ToCharArray();\n    chars[0] = char.ToLower(chars[0]);\n    return new string(chars);\n  }\n}",
          "example": "string s = \"FooBar\";\n\n_30s.Decapitalize(s); // \"fooBar\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6e0f3b18da2fa4e3eec6de9d45e8889b5af803ff36c4e3a85b37d9dafaa36be7",
        "firstSeen": "1576570276",
        "lastUpdated": "1576570276",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Difference",
      "title": "Difference",
      "type": "snippet",
      "attributes": {
        "fileName": "Difference.md",
        "text": "Returns the difference betweend two collections.\n\nUse `IEnumerable.Except()` to only return elements in the second enumerable object and not the first one.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> Difference<T>(IEnumerable<T> a, IEnumerable<T> b) \n  {\n    return a.Except(b);\n  }\n}",
          "example": "int[] a = { 1, 2, 3, 5 };\nint[] b = { 1, 2, 4 };\n\n_30s.Difference(a, b); // { 3, 5 }"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c3949420cd356827ae286a681799c8025d36d8b6d56adf72138d16a046b41532",
        "firstSeen": "1577899906",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "DistinctValues",
      "title": "DistinctValues",
      "type": "snippet",
      "attributes": {
        "fileName": "DistinctValues.md",
        "text": "Returns all distinct values in a collection.\n\nUse `IEnumerable.Distinct()` to get the distinct values in the given collection.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> DistinctValues<T>(IEnumerable<T> data) \n  {\n    return data.Distinct();\n  }\n}",
          "example": "int[] nums =  { 1, 2, 1, 3, 3, 4, 5 };\n\n_30s.DistinctValues(nums); // { 1, 2, 3, 4, 5 }"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4b709d8546684a9651290d1ee57e6ff799729c38e4bcd9b20a5acce41143df25",
        "firstSeen": "1576588434",
        "lastUpdated": "1578750050",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "DuplicateValues",
      "title": "DuplicateValues",
      "type": "snippet",
      "attributes": {
        "fileName": "DuplicateValues.md",
        "text": "Returns all distinct values in a collection.\n\nUse `IEnumerable.GroupBy()` to create groups for each distinct value in the enumerable.\nUse `IEnumerable.Where()` to create select only the groups with a count greater than `1`.\nUse `IEnumerable.Select()` to return the `Key` property of each group.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> DuplicateValues<T>(IEnumerable<T> items)\n  {\n    return items\n      .GroupBy(c => c)\n      .Where(g => g.Count() > 1)\n      .Select(i => i.Key);\n  }\n}",
          "example": "int[] arr = {1, 2, 1, 3, 2, 4};\n\n_30s.DuplicateValues(arr); // {1, 2}"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "528325d25a5dd097d77f5f09d3fb75a5b5cafc760d0b3de61e7cfd2c574e389f",
        "firstSeen": "1578076429",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "Fibonacci",
      "title": "Fibonacci",
      "type": "snippet",
      "attributes": {
        "fileName": "Fibonacci.md",
        "text": "Generates an array, containing the Fibonacci sequence, up until the nth term.\n\nStarting with `0` and `1`, loop from `2` through `n` adding the sum of the last two numbers and appending to the sequence.\nIf `n` is less or equal to `0`, return a list containing `0`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static int[] Fibonacci(int n)\n  {\n    if (n <= 0 )  return new [] { 0 };\n    int[] fib = new int[n + 1];\n    fib[0] = 0;\n    fib[1] = 1;\n    for (int i = 2; i <= n; i ++)\n    {\n      fib[i] = fib[i - 1] + fib[i - 2];\n    }\n    return fib;\n  }\n}",
          "example": "_30s.Fibonacci(7); // { 0, 1, 1, 2, 3, 5, 8, 13 }"
        },
        "tags": [
          "math",
          "array",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "dde795b5b01b5d7a10a2c64279db8f6a7af293b73030b850c66ae5e68af93532",
        "firstSeen": "1577709389",
        "lastUpdated": "1578925388",
        "updateCount": 6,
        "authorCount": 3
      }
    },
    {
      "id": "FilterString",
      "title": "FilterString",
      "type": "snippet",
      "attributes": {
        "fileName": "FilterString.md",
        "text": "Filter a string's contents to include only alphanumeric and allowed characters.\n\nUse `string.ToCharArray()` in combination with `Array.FindAll()` to check if each character in the string is alphanumeric or contained in the `filter`.\nOmit the second argument, `filter`, to only allow alphanumeric characters.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string FilterString(string s, string filter = \"\")\n  {\n    return new string(\n      Array.FindAll(s.ToCharArray(), c => char.IsLetterOrDigit(c) || filter.Contains(c))\n    );\n  }\n}",
          "example": "string s = \"@30_seconds_of_code#-$\";\n\n_30s.FilterString(s); // \"30secondsofcode\"\n_30s.FilterString(s,\"_\"); // \"30_seconds_of_code\"\n_30s.FilterString(s,\"_@\"); // \"@30_seconds_of_code\""
        },
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "06cfb76e42df33a38a44ef4e2f232a5b4bb019afb25298d9428d4db935beb84f",
        "firstSeen": "1577297645",
        "lastUpdated": "1577297645",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "FindIndexOfAll",
      "title": "FindIndexOfAll",
      "type": "snippet",
      "attributes": {
        "fileName": "FindIndexOfAll.md",
        "text": "Returns all indices in an `IList` that match the given predicate function, `match`.\n\nUse `Enumerable.Range()` to iterate over all indices in `data`.\nUse `IEnumerable.Where()` to filter out all values in `data` for which `match` returns `false` and return only matching indices.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<int> FindIndexOfAll<T>(IList<T> data, Predicate<T> match)\n  {\n    return Enumerable\n      .Range(0, data.Count())\n      .Where(i => match(data[i]));\n  }\n}",
          "example": "int[] nums = {1, 2, 4, 5, 2, 2, 4};\n\n_30s.FindIndexOfAll(nums, x => x % 2 != 0); // {0, 3}"
        },
        "tags": [
          "array",
          "list",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "44b16b26051594c284b048330167da876bec316c2d63fc9edac5c251121bc96e",
        "firstSeen": "1578315613",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "FindParityOutliers",
      "title": "FindParityOutliers",
      "type": "snippet",
      "attributes": {
        "fileName": "FindParityOutliers.md",
        "text": "Given a collection, returns the items that are parity outliers.\n\nUse `IEnumerable.GroupBy()` to create groups for each parity (`0` and `1`).\nUse `IEnumerable.OrderBy()` in combination with `IEnumerable.Count()` to order the two groups in ascending order based on frequency.\nUse `IEnumerable.First()` to get the first element and return its `Key` property, which corresponds to the least common parity value.\nFinally, use `IEnumerable.Where()` to get all elements with the least common parity value.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<int> FindParityOutliers(IEnumerable<int> items)\n  {\n    return items.Where(\n      i => i % 2 == items\n        .GroupBy(i => i % 2)\n        .OrderBy(i => i.Count())\n        .First()\n        .Key\n    );\n  }\n}",
          "example": "int[] nums = {1, 2, 3, 4, 6};\n\n_30s.FindParityOutliers(nums); // {1, 3}"
        },
        "tags": [
          "array",
          "list",
          "math",
          "advanced"
        ]
      },
      "meta": {
        "hash": "0eca80d60ffef12a706bcbe416a9437bfaf0e48e311b7ed18b4cc77cf7465154",
        "firstSeen": "1578076450",
        "lastUpdated": "1578925388",
        "updateCount": 6,
        "authorCount": 3
      }
    },
    {
      "id": "Flatten",
      "title": "Flatten",
      "type": "snippet",
      "attributes": {
        "fileName": "Flatten.md",
        "text": "Flattens a 2D collection into a single dimension.\n\nUse `IEnumerable.SelectMany()` to flatten the 2D enumerable object.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> Flatten<T>(IEnumerable<IEnumerable<T>> obj) \n  {\n    return obj.SelectMany(v => v);\n  }\n}",
          "example": "int[][] x = {\n  new [] {1, 2, 3},\n  new [] {4, 5, 6}\n};\n\n_30s.Flatten(x); // {1, 2, 3, 4, 5, 6}"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9a8f2b1e8ffecd3e0721ca5f6ad3621287564b05d9779a6fc709e7740f33964e",
        "firstSeen": "1577901874",
        "lastUpdated": "1578925388",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "FormatDuration",
      "title": "FormatDuration",
      "type": "snippet",
      "attributes": {
        "fileName": "FormatDuration.md",
        "text": "Returns the human readable format of the given number of seconds.\n\nUse `TimeSpan.FromSeconds()` to convert the number of `seconds` to a `TimeSpan` object.\nUse `TimeSpan.ToString()` with an appropriate format specifier to return a human readable string of the value.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string FormatDuration(double seconds) \n  {\n    return TimeSpan.FromSeconds(seconds).ToString(@\"d\\.hh\\:mm\\:ss\\.fff\");\n  }\n}",
          "example": "_30s.FormatDuration(34325055.574); // 397.06:44:15.574"
        },
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ce80ceea60396be86ca2feb5986264436dd566bd04851656d310f3dd4462af94",
        "firstSeen": "1577898136",
        "lastUpdated": "1577898136",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "GCD",
      "title": "GCD",
      "type": "snippet",
      "attributes": {
        "fileName": "GCD.md",
        "text": "Calculates the greatest common divisor of the given numbers.\n\nDefine a `GCD()` function for two numbers, which uses recursion.\nBase case is when `y` equals `0`, which returns `x`.\nOtherwise the GCD of `y` and the remainder of the division `x/y` is returned.\nDefine an overload that accepts multiple numbers or an array and use `IEnumerable.Aggregate()` to apply `GCD()` to them.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static int GCD(params int[] nums)\n  {\n    return nums.Aggregate(GCD);\n  }\n  public static int GCD(int x, int y)\n  {\n    return y == 0 ? x : GCD(y, x % y);\n  }\n}",
          "example": "_30s.GCD(8, 36, 28); // 4"
        },
        "tags": [
          "math",
          "recursion",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "11c8aa0f1b597533e66b8eac65128b185bfaed9aced2cb5709d51d8780572867",
        "firstSeen": "1578229187",
        "lastUpdated": "1578750756",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "GetFirstN",
      "title": "GetFirstN",
      "type": "snippet",
      "attributes": {
        "fileName": "GetFirstN.md",
        "text": "Returns the first `n` elements in a collection.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Take(n)` to get the first `n` elements.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\nOmit the second argument, `n`, to use a default value of `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static IEnumerable<T> GetFirstN<T>(IEnumerable<T> list, int n = 1)\n  {\n    return list.Count() != 0 ? list.Take(n) : default(IEnumerable<T>);\n  }\n}",
          "example": "List<int> nums = new List<int> { 1, 2, 3, 4, 5 };\n\n_30s.GetFirstN(nums); // { 1 }\n_30s.GetFirstN(nums, 3); // { 1, 2, 3 }"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "c854888fc506f133d7eb5391905e9baba297ff16238376151afca0f12822c1d6",
        "firstSeen": "1577047252",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "GetLastN",
      "title": "GetLastN",
      "type": "snippet",
      "attributes": {
        "fileName": "GetLastN.md",
        "text": "Returns the last `n` elements in a collection.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Skip(list.Count() - n)` to get the last `n` elements.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\nOmit the second argument, `n`, to use a default value of `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static IEnumerable<T> GetLastN<T>(IEnumerable<T> list, int n = 1)\n  {\n    return list.Count() != 0 ? list.Skip(list.Count() - n) : default(IEnumerable<T>);\n  }\n}",
          "example": "List<int> nums = new List<int> { 1, 2, 3, 4, 5 };\n\n_30s.GetLastN(nums); // { 5 }\n_30s.GetLastN(nums, 3); // { 3, 4, 5 }"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "0b9b53484f3ebaeeee2bb39056ba8bd97d8c37fc722442136cf5c9503bce8264",
        "firstSeen": "1577047634",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "GetType",
      "title": "GetType",
      "type": "snippet",
      "attributes": {
        "fileName": "GetType.md",
        "text": "Returns the type of the given object.\n\nUse `typeof()` on the given object's type.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static Type GetType<T>(T obj) \n  {\n    return typeof(T);\n  }\n}",
          "example": "string s = \"fooBar\";\nList<string> list = new List<string> { \"a\", \"b\", \"c\" };\n\n_30s.GetType(s); // System.String\n_30s.GetType(list); // System.Collections.Generic.List`1[System.String]"
        },
        "tags": [
          "utility",
          "type",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8958a51e546251cdc7341fab6548ef334a9bd07eef732b54c59a2a4ae65934cd",
        "firstSeen": "1577278779",
        "lastUpdated": "1578925388",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "Head",
      "title": "Head",
      "type": "snippet",
      "attributes": {
        "fileName": "Head.md",
        "text": "Returns the head of a collection.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Take(1)` to get the first element, `IEnumerable.ToArray()[0]` to convert to array and return the element.\nIf the enumerable object is empty, return the `default()` value for the given type.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static T Head<T>(IEnumerable<T> list) \n  {\n    return list.Count() != 0 ? list.Take(1).ToArray()[0] : default(T);\n  }\n}",
          "example": "List<int> nums = new List<int> { 1, 2, 3, 4, 5 };\nList<int> empty = new List<int> { };\nchar[] chars = {'A','B','C'};\n\n_30s.Head(nums); // 1\n_30s.Head(empty); // 0\n_30s.Head(chars); // 'A'"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8489526c47205b64e73c73b75756bdcbf880711d55c017586cec5f81ae129d4f",
        "firstSeen": "1577045234",
        "lastUpdated": "1578925388",
        "updateCount": 6,
        "authorCount": 4
      }
    },
    {
      "id": "HexToByteArray",
      "title": "HexToByteArray",
      "type": "snippet",
      "attributes": {
        "fileName": "HexToByteArray.md",
        "text": "Converts a hexadecimal string to a `byte` array.\n\nUse `Enumerable.Range()` in combination with `string.Length` to get the indices of the given string in an array.\nUse `Enumerable.Where()` to get only the even indices in the previous range.\nUse `Enumerable.Select()` in combination with `Convert.ToByte()` and `string.Substring()` to convert each byte's hex code to a `byte`.\nFinally, use `Enumerable.ToArray()` to return a `byte[]`.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static byte[] HexToByteArray(string hex)\n  {\n    return Enumerable.Range(0, hex.Length)\n      .Where(x => x % 2 == 0)\n      .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))\n      .ToArray();\n  }\n}",
          "example": "_30s.HexToByteArray(\"F15936\"); // { 241, 89, 54 }"
        },
        "tags": [
          "string",
          "utility",
          "advanced"
        ]
      },
      "meta": {
        "hash": "804a476d856f46835e8d5fa36c3b799e8b483679cf514f1d967e319ff47187f8",
        "firstSeen": "1577294976",
        "lastUpdated": "1577294976",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "IndexOfAll",
      "title": "IndexOfAll",
      "type": "snippet",
      "attributes": {
        "fileName": "IndexOfAll.md",
        "text": "Returns all indices of `n` in an `IList`.\n\nUse `Enumerable.Range()` to iterate over all indices in `data`.\nUse `Enumerable.Where()` in combination with `object.Equals()` to compare each value in `data` to `n` and return only matching indices.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<int> IndexOfAll<T>(IList<T> data, T n)\n  {\n    return Enumerable\n      .Range(0, data.Count())\n      .Where(i => object.Equals(n, data[i]));\n  }\n}",
          "example": "int[] nums = {1, 2, 4, 5, 2, 2, 4};\n\n_30s.IndexOfAll(_30s.IndexOfAll(nums, 2)); // {1, 4, 5}"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "35a4b23c72bbff22758b295a9f6bb02ed467a7698e006e480790fdda13724b84",
        "firstSeen": "1578315599",
        "lastUpdated": "1578750756",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "Initialize2DArray",
      "title": "Initialize2DArray",
      "type": "snippet",
      "attributes": {
        "fileName": "Initialize2DArray.md",
        "text": "Initializes a 2D array of the given width, height and value.\n\nUse `Enumerable.Repeat()` to repeat `value` `width` times, convert to an array and repeat `height` times using the same method.\nUse `IEnumerable.Select()` and `IEnumerable.First()` to convert the jagged array to a 2D array.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static T[,] Initialize2DArray<T>(int width, int height, T value) \n  {\n    return new [] { new T [height, width] }\n      .Select(_ => new { x = _, y = Enumerable.Repeat(\n          Enumerable.Repeat(value, width).ToArray(), height\n        )\n        .ToArray()\n        .Select((a, ia) => a.Select((b, ib) => _[ia, ib] = b).Count()).Count() }\n      )\n      .Select(_ => _.x)\n      .First();\n  }\n}",
          "example": "_30s.Initialize2DArray(2, 3, 5); // { {5, 5}, {5, 5}, {5, 5} }"
        },
        "tags": [
          "array",
          "utility",
          "advanced"
        ]
      },
      "meta": {
        "hash": "6b1724ad51c747cbe64d1c2175222aa29de5dc082bc4e51e03b35ed4e18b3bea",
        "firstSeen": "1577701612",
        "lastUpdated": "1578925388",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "IsA",
      "title": "IsA",
      "type": "snippet",
      "attributes": {
        "fileName": "IsA.md",
        "text": "Returns `true` if the given object is of the specified type, `false` otherwise.\n\nUse the `is` operator to check if `obj` is of the given type, `T`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsA<T>(object obj) \n  {\n    return obj is T;\n  }\n}",
          "example": "string s = \"fooBar\";\n\n_30s.IsA<string>(s); // true\n_30s.IsA<int>(s); // false"
        },
        "tags": [
          "utility",
          "type",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c45f870ccfad72b8183ef726d10a590534b2f54632293cc87fb287edab74ae49",
        "firstSeen": "1577278798",
        "lastUpdated": "1578592261",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "IsDivisible",
      "title": "IsDivisible",
      "type": "snippet",
      "attributes": {
        "fileName": "IsDivisible.md",
        "text": "Checks if the first numeric argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsDivisible(long dividend, long divisor) \n  {\n    return dividend % divisor == 0;\n  }\n}",
          "example": "_30s.IsDivisible(6, 3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c873bd95a37f8ef96f4c136e920c68c739a88e6e9a5843e01cf6d6b240a2f9fe",
        "firstSeen": "1578076381",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "IsDouble",
      "title": "IsDouble",
      "type": "snippet",
      "attributes": {
        "fileName": "IsDouble.md",
        "text": "Returns `true` if the given string can be parsed into a double, `false` otherwise.\n\nReturn the result of calling `Double.TryParse()` with `NymberStyles.Float` for the given `num` string.\n\n",
        "codeBlocks": {
          "code": "using System.Globalization;\n\npublic static partial class _30s \n{\n  public static bool IsDouble(string num) \n  {\n    Double _ = 0.0;\n    return Double.TryParse(num, NumberStyles.Float, NumberFormatInfo.CurrentInfo, out _);\n  }\n}",
          "example": "_30s.IsDouble(\"2\"); // true\n_30s.IsDouble(\"hi\"); // false"
        },
        "tags": [
          "math",
          "type",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "3530856a37d6fb0acc65d1de4bc828ea24d53b940ff9f28b4006fa7441c6faa2",
        "firstSeen": "1576587842",
        "lastUpdated": "1578751918",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "IsEven",
      "title": "IsEven",
      "type": "snippet",
      "attributes": {
        "fileName": "IsEven.md",
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nCheck whether a number is odd or even using the modulo (`%`) operator. \nReturn `true` if the number is even, `false` if the number is odd.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsEven(int n) \n  {\n    return n % 2 == 0;\n  }\n}",
          "example": "_30s.IsEven(2); // true\n_30s.IsEven(3); // false"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0fb0bbb194f88b79f53b4a8964d736c44652230b2883f79543bd15dd5046f5d4",
        "firstSeen": "1576570816",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "IsInteger",
      "title": "IsInteger",
      "type": "snippet",
      "attributes": {
        "fileName": "IsInteger.md",
        "text": "Returns `true` if the given string can be parsed into an integer, `false` otherwise.\n\nReturn the result of calling `Double.TryParse()` with `NymberStyles.Integer` for the given `num` string.\nUse `Double.TryParse()` to allow handling of values larger than `Int64`.\n\n",
        "codeBlocks": {
          "code": "using System.Globalization;\n\npublic static partial class _30s \n{\n  public static bool IsInteger(string num) \n  {\n    Double _ = 0.0;\n    return Double.TryParse(num, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out _);\n  }\n}",
          "example": "_30s.IsInteger(\"2\"); // true\n_30s.IsInteger(\"3.1\"); // false"
        },
        "tags": [
          "math",
          "type",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b752affac449857bd894dd1915ad32a7b19a13838ea49b59c041c6f688d567b6",
        "firstSeen": "1576587836",
        "lastUpdated": "1578751918",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "IsLower",
      "title": "IsLower",
      "type": "snippet",
      "attributes": {
        "fileName": "IsLower.md",
        "text": "Checks if a string is lower case.\n\nConvert the given string to lower case, using  `string.ToLower()`  and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsLower(string str) \n  {\n    return str.ToLower() == str;\n  }\n}",
          "example": "string s1 = \"abc\";\nstring s2 = \"cDe\";\n\n_30s.IsLower(s1); // true\n_30s.IsLower(s2); // false"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "582ff53b416153491e8d1a232df377db1645898221f7aa6e393ca53812dcb520",
        "firstSeen": "1576571006",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "IsNotA",
      "title": "IsNotA",
      "type": "snippet",
      "attributes": {
        "fileName": "IsNotA.md",
        "text": "Returns `true` if the given object is not of the specified type, `false` otherwise.\n\nUse the `is` operator to check if `obj` is not of the given type, `T`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsNotA<T>(object obj) \n  {\n    return !(obj is T);\n  }\n}",
          "example": "string s = \"fooBar\";\n\n_30s.IsNotA<string>(s); // false\n_30s.IsNotA<int>(s); // true"
        },
        "tags": [
          "utility",
          "type",
          "beginner"
        ]
      },
      "meta": {
        "hash": "487de7b23d77d6e5a69146b3fae37aae2279feea62d8b84635634e490f2d1574",
        "firstSeen": "1577278815",
        "lastUpdated": "1578592261",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "IsOdd",
      "title": "IsOdd",
      "type": "snippet",
      "attributes": {
        "fileName": "IsOdd.md",
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nCheck whether a number is odd or even using the modulo (`%`) operator. \nReturn `true` if the number is odd, `false` if the number is even.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsOdd(int n) \n  {\n    return n % 2 != 0;\n  }\n}",
          "example": "_30s.IsOdd(3); // true\n_30s.IsOdd(4); // false"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "7dbbfda067d1608174382eacc2eee2c20d72297c5e550aeb3d0b5beff9061cf6",
        "firstSeen": "1576570824",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "IsPowerOfTwo",
      "title": "IsPowerOfTwo",
      "type": "snippet",
      "attributes": {
        "fileName": "IsPowerOfTwo.md",
        "text": "Returns `true` if the given number is a power of `2`, `false` otherwise.\n\nUse the bitwise binary AND operator (`&`) to determine if `n` is a power of `2`.\nAdditionally, check that `n` is different from `0`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsPowerOfTwo(ulong n) \n  {\n    return (n != 0) && ((n & (n - 1)) == 0);\n  }\n}",
          "example": "_30s.IsPowerOfTwo(0); // false\n_30s.IsPowerOfTwo(1); // true\n_30s.IsPowerOfTwo(8); // true"
        },
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "846ab17bd92f8f1190e2bcd8fe5ba877fe3303b0a7bee9c152c4abf2d4022e00",
        "firstSeen": "1577278834",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "IsUpper",
      "title": "IsUpper",
      "type": "snippet",
      "attributes": {
        "fileName": "IsUpper.md",
        "text": "Checks if a string is upper case.\n\nConvert the given string to upper case, using  `string.ToUpper()`  and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsUpper(string str) \n  {\n    return str.ToUpper() == str;\n  }\n}",
          "example": "string s1 = \"ABC\";\nstring s2 = \"cDe\";\n\n_30s.IsUpper(s1); // true\n_30s.IsUpper(s2); // false"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "bfa98b57cc893e34cb499fc3bce305a26f2925a067f940359c1b158e2fb35f44",
        "firstSeen": "1576571048",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "IsWeekday",
      "title": "IsWeekday",
      "type": "snippet",
      "attributes": {
        "fileName": "IsWeekday.md",
        "text": "Returns `true` if the given `DateTime` is a weekday, `false` otherwise.\n\nUse `DateTime.DayOfWeek` to check if the given `DateTime` is not a Saturday or Sunday.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsWeekday(DateTime date) \n  {\n    return date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday;\n    }\n}",
          "example": "_30s.IsWeekday(new DateTime(2020, 1, 15)); // true\n_30s.IsWeekday(new DateTime(2020, 1, 19)); // false"
        },
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0c6131c265188dc595d5f03d2b82951a985ba8d940288b0a364ff22fc5b1c017",
        "firstSeen": "1578312944",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "IsWeekend",
      "title": "IsWeekend",
      "type": "snippet",
      "attributes": {
        "fileName": "IsWeekend.md",
        "text": "Returns `true` if the given `DateTime` is a not weekday, `false` otherwise.\n\nUse `DateTime.DayOfWeek` to check if the given `DateTime` is a Saturday or Sunday.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static bool IsWeekend(DateTime date) \n  {\n    return date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;\n  }\n}",
          "example": "_30s.IsWeekend(new DateTime(2020, 1, 15)); // false\n_30s.IsWeekend(new DateTime(2020, 1, 19)); // true"
        },
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5fc6d1b86f5f811617eefb0e0bd86cadcfad59b3e43b312832e67bb1cc7d0bb4",
        "firstSeen": "1578312955",
        "lastUpdated": "1578592261",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "KeepUpToN",
      "title": "KeepUpToN",
      "type": "snippet",
      "attributes": {
        "fileName": "KeepUpToN.md",
        "text": "Filters a collection keeping up to `n` occurences of each value.\n\nUse `IEnumerable.Distinct()` in combination with `IEnumerable.ToDictionary()` to create a dictionary with an initial count of `0` for each distinct value in `data`.\nUse `IEnumerable.Where()` to filter out occurences after the `n`th one for each element, using the previously created dictionary.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> KeepUpToN<T>(IEnumerable<T> data, int n)\n  {\n    var occurences = data.Distinct().ToDictionary(i => i, value => 0);\n    return data.Where(i => occurences[i]++ < n);\n  }\n}",
          "example": "int[] nums = {1, 1, 2, 3, 3, 3, 1};\n\n_30s.KeepUpToN(nums, 2); // {1, 1, 2, 3, 3}"
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b00fb979dac80253099b8465da553ce83546ecfc365b0dfd0f1f0c2d48d37b96",
        "firstSeen": "1578255997",
        "lastUpdated": "1578925388",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "LCM",
      "title": "LCM",
      "type": "snippet",
      "attributes": {
        "fileName": "LCM.md",
        "text": "Calculates the least common multiple of the given numbers.\n\nDefine a `_GCD()` method that determines the greatest common divisor, using recursion.\nUse `_GCD()` and the fact that `LCM(x, y) = x * y / GCD(x,y)` to determine the least common multiple.\nUse `IEnumerable.Aggregate()` to apply `LCM()` to all the given arguments.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static int LCM(params int[] nums)\n  {\n    return nums.Aggregate((x,y) => (x * y) / _GCD(x, y));\n  }\n  private static int _GCD(int x, int y)\n  {\n    return y == 0 ? x : _GCD(y, x % y);\n  }\n}",
          "example": "_30s.LCM(1, 3, 4, 5); // 60\n_30s.LCM(new [] {12, 7}); // 84"
        },
        "tags": [
          "math",
          "recursion",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8cc6e9a921e304dec0f721a08b7a687e681556a9abe1429574cf18742a5bd116",
        "firstSeen": "1578229860",
        "lastUpdated": "1578750756",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "Mask",
      "title": "Mask",
      "type": "snippet",
      "attributes": {
        "fileName": "Mask.md",
        "text": "Replaces all but the last `n` characters in a string with the specified `mask` character.\n\nUse `string.Substring()` to get the last `n` characters of the passed string, `str`.\nUse `string.PadLeft()` to add as many `mask` characters as necessary to the start of the string to return a string of the same length.\nOmit the third argument, `mask`, to use a default character of `'*'`.\nOmit the second argument, `n`, to keep a default of `4` characters unmasked.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string Mask(string str, int n = 4, char mask = '*') \n  {\n    return str.Substring(str.Length - n).PadLeft(str.Length, mask);\n  }\n}",
          "example": "string s = \"1234567890\";\n\n_30s.Mask(s); // \"******7890\"\n_30s.Mask(s, 3); // \"*******890\"\n_30s.Mask(s, 2, '/$'); // \"$$$$$$$$90\""
        },
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9c469a03a2325eba95f39d919a8e4a0cbe7e5e6d849e772067368e04f4d4a425",
        "firstSeen": "1576588260",
        "lastUpdated": "1576742322",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "MaxBy",
      "title": "MaxBy",
      "type": "snippet",
      "attributes": {
        "fileName": "MaxBy.md",
        "text": "Returns the maximum of a collection, after mapping each element to a value using the provided function.\n\nUse `IEnumerable.Select()` to map each element to the value returned by the provided selector function, `fn`.\nUse `IEnumerable.Max()` to get the maximum of the resulting values.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s\n{\n  public static double MaxBy<T>(IEnumerable<T> values, Func<T,int> fn)\n  {\n    return values.Select(fn).Max();\n  }\n}",
          "example": "var p = new [] {\n  new { a = 3, b = 2},\n  new { a = 2, b = 1}\n};\n\n_30s.MaxBy(p, v => v.a); // 3\n_30s.MaxBy(p, v => v.b); // 2"
        },
        "tags": [
          "math",
          "list",
          "array",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "748be18c074d30f21ce6741a076a996664b4a364ed6324064eceb2135170efe9",
        "firstSeen": "1577708411",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "MaxDateTime",
      "title": "MaxDateTime",
      "type": "snippet",
      "attributes": {
        "fileName": "MaxDateTime.md",
        "text": "Returns the maximum of two `DateTime` values.\n\nUse the conditional operator (`?:`) to return the maximum of the two values.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime MaxDateTime(DateTime d1, DateTime d2) \n  {\n    return (d1 > d2) ? d1 : d2;\n  }\n}",
          "example": "DateTime d1 = new DateTime(DateTime.MaxValue.Ticks);\nDateTime d2 = new DateTime(DateTime.MinValue.Ticks);\n\n_30s.MaxDateTime(d1, d2); // 12/31/9999 11:59:59 PM"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8052e3922028cb52cc0737402a13b27a277587374c00fe928bc379dd0489ce97",
        "firstSeen": "1576588060",
        "lastUpdated": "1576742823",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "Median",
      "title": "Median",
      "type": "snippet",
      "attributes": {
        "fileName": "Median.md",
        "text": "Finds the median of a list of numbers.\n\nUse the `params` keyword to accept either an array or a variable number of arguments.\nSort the array using `Array.sort()` and find the median. \nWhich is either the middle element of the list, if the list length is odd or the average of the two middle elements, if the list length is even.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static double Median(params double[] values)\n  {\n    Array.Sort(values);\n    if (values.Length % 2 == 0)\n      return (values[values.Length / 2 - 1] + values[values.Length / 2]) / 2;\n    return (double)values[values.Length / 2];\n  }\n}",
          "example": "double[] nums = { 5, 6, 7, 8 };\n\n_30s.Median(4, 8, 1); // 4\n_30s.Median(nums); // 6.5"
        },
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b033e89ef4efe03889612c20d96e1258b491c4434ccac92d35994859d297c9a8",
        "firstSeen": "1577702621",
        "lastUpdated": "1578925388",
        "updateCount": 6,
        "authorCount": 3
      }
    },
    {
      "id": "MinBy",
      "title": "MinBy",
      "type": "snippet",
      "attributes": {
        "fileName": "MinBy.md",
        "text": "Returns the minimum of a collection, after mapping each element to a value using the provided function.\n\nUse `IEnumerable.Select()` to map each element to the value returned by the provided selector function, `fn`.\nUse `IEnumerable.Min()` to get the minimum of the resulting values.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static double MinBy<T>(IEnumerable<T> values, Func<T,int> fn)\n  {\n    return values.Select(fn).Min();\n  }\n}",
          "example": "var p = new [] {\n  new { a = 3, b = 2},\n  new { a = 2, b = 1}\n};\n\n_30s.MinBy(p, v => v.a); // 2\n_30s.MinBy(p, v => v.b); // 1"
        },
        "tags": [
          "math",
          "list",
          "array",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "4569015b9e0b2657788a61afb1ffdb4d76792407bc68e6c4d8bbfae38f47042a",
        "firstSeen": "1577708417",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "MinDateTime",
      "title": "MinDateTime",
      "type": "snippet",
      "attributes": {
        "fileName": "MinDateTime.md",
        "text": "Returns the minimum of two `DateTime` values.\n\nUse the conditional operator (`?:`) to return the minimum of the two values.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime MinDateTime(DateTime d1, DateTime d2) \n  {\n    return (d1 < d2) ? d1 : d2;\n  }\n}",
          "example": "DateTime d1 = new DateTime(DateTime.MaxValue.Ticks);\nDateTime d2 = new DateTime(DateTime.MinValue.Ticks);\n\n_30s.MinDateTime(d1, d2); // 1/1/0001 12:00:00 AM"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c39e58af84153f01abf9f57262cd67d2431cc553399eb360e9b0741261c58a93",
        "firstSeen": "1576588054",
        "lastUpdated": "1576742838",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "MostFrequent",
      "title": "MostFrequent",
      "type": "snippet",
      "attributes": {
        "fileName": "MostFrequent.md",
        "text": "Returns the most frequent element of a collection.\n\nUse `IEnumerable.GroupBy()` to group `values` by value.\nUse `IEnumerable.OrderByDescending()` in combination with `IEnumerable.Count()` to order the results in descending order based on frequency.\nUse `IEnumerable.First()` to get the first element and return its `Key` property, which corresponds to the element's value.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static T MostFrequent<T>(IEnumerable<T> values)\n  {\n    return values\n      .GroupBy(v => v)\n      .OrderByDescending(v => v.Count())\n      .First()\n      .Key;\n  }\n}",
          "example": "int[] nums = { 1, 2, 3, 3, 2, 3 };\nList<string> str = new List<string> { \"a\", \"b\", \"b\", \"c\" };\n\n_30s.MostFrequent(nums); // 3\n_30s.MostFrequent(str); // \"b\""
        },
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "51c4fd5983af4f470c3a79d0304e7ad0b6b04cecbd2b554d30a104c718e04339",
        "firstSeen": "1577704578",
        "lastUpdated": "1578925388",
        "updateCount": 6,
        "authorCount": 3
      }
    },
    {
      "id": "None",
      "title": "None",
      "type": "snippet",
      "attributes": {
        "fileName": "None.md",
        "text": "Returns `true` if the provided predicate function returns `false` for all elements in a collection, `false` otherwise.\n\nUse `IEnumerable.ToArray()`, `Array.Exists()` to test if all elements in the collection return `false` based on the predicate function, `match`.\nOmit the predicate function, `match`, to use the overload that checks if each value is `null` by default.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static bool None<T>(IEnumerable<T> data, Predicate<T> match) \n  {\n    return !Array.Exists(data.ToArray(), match);\n  }\n  public static bool None<T>(IEnumerable<T> data) \n  {\n    return Array.Exists(data.ToArray(), val => val == null);\n  }\n}",
          "example": "int[] nums = { 4, 2, 3 };\n\n_30s.None(nums, x => x < 0); // true\n_30s.None(nums); // false"
        },
        "tags": [
          "array",
          "list",
          "lambda",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cdc71f6a133214ede7e8ef34080aa1b71e7d9f1537146f71d5f78a86beec45af",
        "firstSeen": "1576571834",
        "lastUpdated": "1578750050",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "PadNumber",
      "title": "PadNumber",
      "type": "snippet",
      "attributes": {
        "fileName": "PadNumber.md",
        "text": "Pads a given number to the specified `length`.\n\nUse `Int32.ToString()` with an appropriate format specifier, produced using string interpolation.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static string PadNumber(int n, int length)\n  {\n    return n.ToString($\"D{length}\");\n  }\n}",
          "example": "_30s.PadNumber(1234,6); // \"001234\""
        },
        "tags": [
          "string",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8d7933f298a3879af003418959a66b5d9352170e60db91c3f60c9383e1947ede",
        "firstSeen": "1577299654",
        "lastUpdated": "1577299654",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "RandomDoubleInRange",
      "title": "RandomDoubleInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "RandomDoubleInRange.md",
        "text": "Returns a random double in the specified range.\n\nUse `Random.NextDouble()` to generate a random value and map it to the desired range using multiplication.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static double RandomDoubleInRange(double min, double max) \n  {\n    return (new Random().NextDouble() * (max - min)) + min;\n  }\n}",
          "example": "_30s.RandomDoubleInRange(0.5, 5); // 2.20486941011849"
        },
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5adcd7cd83ed3ed5a11b4726f8fd5613ff76faf5af7dbc7845541aaddbdcc446",
        "firstSeen": "1577899135",
        "lastUpdated": "1577950429",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "RandomIntegerInRange",
      "title": "RandomIntegerInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "RandomIntegerInRange.md",
        "text": "Returns a random integer in the specified range.\n\nUse `Random.Next()` to generate an integer in the desired range.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static int RandomIntegerInRange(int min, int max) \n  {\n    return new Random().Next(min, max);\n  }\n}",
          "example": "_30s.RandomIntegerInRange(0, 5); // 2"
        },
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "9a3c55a7b319be95782949ed29297a326dae3cd0d2ce07167669108d92a4f149",
        "firstSeen": "1577899120",
        "lastUpdated": "1577899120",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Repeat",
      "title": "Repeat",
      "type": "snippet",
      "attributes": {
        "fileName": "Repeat.md",
        "text": "Creates a new string by repeating the given string `n` times.\n\nUse `Enumerable.Repeat()` to repeat `s` `n` times, `string.Concat()` to convert the result to a `string`.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static string Repeat(string s, int n)\n  {\n    return string.Concat(Enumerable.Repeat(s, n));\n  }\n}",
          "example": "_30s.Repeat(\"Ha\",5); // \"HaHaHaHaHa\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "70e7982d16309005ea8218b60659eb2003dd9685b970dd17b257b9b885441be2",
        "firstSeen": "1577298772",
        "lastUpdated": "1577298772",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Reverse",
      "title": "Reverse",
      "type": "snippet",
      "attributes": {
        "fileName": "Reverse.md",
        "text": "Reverses a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `Array.Reverse()` to reverse the array.\nUse `IEnumerable.ToArray()` to create an array of `char` and pass it to a `new string()`.\n\n",
        "codeBlocks": {
          "code": "using System.Linq;\n\npublic static partial class _30s \n{\n  public static void Reverse(string s) \n  {\n    return new string(s.ToCharArray().Reverse().ToArray());\n  }\n}",
          "example": "string s = \"Hello World\";\n\n_30s.Reverse(s); // \"dlroW olleH\""
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e79c14b00d42af188414b6a8642f62f4820e716927e2722181b01bb612184aaf",
        "firstSeen": "1577278851",
        "lastUpdated": "1577278851",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Shuffle",
      "title": "Shuffle",
      "type": "snippet",
      "attributes": {
        "fileName": "Shuffle.md",
        "text": "Randomizes the order of the values of an `IList`, updating the original `IList` object.\n\nUse the [Fisher-Yates algorithm](\nhttps://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Fisher_and_Yates%27_original_method) to reorder the elements of the given `IList` object.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static void Shuffle<T>(IList<T> list)\n  {\n    Random rand = new Random();\n    for (int n = list.Count() - 1 ; n > 0 ; n--)\n    {\n      int k = rand.Next(n + 1);\n      T value = list[k];\n      list[k] = list[n];\n      list[n] = value;\n    }\n  }\n}",
          "example": "List<int> nums = new List<int> { 1, 2, 3, 4, 5, 6 };\nint[] arr = { 1, 2, 3, 4, 5, 6 };\n\n_30s.Shuffle(nums); // nums = { 3, 5, 2, 1, 4, 6 }\n_30s.Shuffle(arr); // arr = { 6, 2, 5, 1, 4, 3 }"
        },
        "tags": [
          "array",
          "list",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b9f02871d1a71d1fd5c1f3cfca631bc181b9f1929274ead5d0d0dc958153f056",
        "firstSeen": "1577050162",
        "lastUpdated": "1578925388",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "SplitLines",
      "title": "SplitLines",
      "type": "snippet",
      "attributes": {
        "fileName": "SplitLines.md",
        "text": "Splits a multiline string into an array of lines.\n\nUse `string.Split()` with all forms of the newline separator to split the string into an array of strings.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string[] SplitLines(string s)\n  {\n    return s.Split(new [] { \"\\r\\n\", \"\\r\", \"\\n\" }, StringSplitOptions.None);\n  }\n}",
          "example": "string s = \"This\\nis a\\nmultiline\\nstring.\\n\";\n\n_30s.SplitLines(s); // {\"This\", \"is a\", \"multiline\", \"string.\" , \"\"}"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c46a0ffef83c277ef435b871cd21481463aed960d4802ff224224c4608ef1e49",
        "firstSeen": "1577298283",
        "lastUpdated": "1578925388",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "SplitStringBy",
      "title": "SplitStringBy",
      "type": "snippet",
      "attributes": {
        "fileName": "SplitStringBy.md",
        "text": "Splits a string into an array of strings using a multicharacter (string) separator.\n\nUse `string.Split()` with the given `separator` to split the string into an array of strings.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string[] SplitStringBy(string s, string separator) \n  {\n    return s.Split(new [] {separator}, StringSplitOptions.None);\n  }\n}",
          "example": "string s = \"Apples--oranges--pears\";\n\n_30s.SplitStringBy(s,\"--\"); // {Apples, oranges, pears}"
        },
        "tags": [
          "string",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3e9da1263a43bcd7a678cb3e8e529d48a7f2c38dd5f503e25f28f5f7cb089614",
        "firstSeen": "1577294370",
        "lastUpdated": "1578925388",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "Stringify",
      "title": "Stringify",
      "type": "snippet",
      "attributes": {
        "fileName": "Stringify.md",
        "text": "Combines the elements of an enumerable object into a string.\n\nUse `string.Join()` to combine all elements in the `IEnumerable` into a `string`, using `delimiter`.\nOmit the second argument, `delimiter`, to use the default delimiter of `\",\"`.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static string Stringify<T>(IEnumerable<T> elements, string delimiter = \",\") \n  {\n    return string.Join(delimiter, elements);\n  }\n}",
          "example": "IList<string> s = new List<string> {\"a\", \"b\", \"c\"};\nint[] n = {1, 2, 3};\n\n_30s.Stringify(s); // \"a,b,c\"\n_30s.Stringify(n, \" \"); // \"1 2 3\""
        },
        "tags": [
          "utility",
          "array",
          "list",
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "9e221c5ecad934b89cd29a304c8f7eb3e9a22ad869de814931f7e16ff6ae09d1",
        "firstSeen": "1576698679",
        "lastUpdated": "1578925388",
        "updateCount": 6,
        "authorCount": 4
      }
    },
    {
      "id": "Subarray",
      "title": "Subarray",
      "type": "snippet",
      "attributes": {
        "fileName": "Subarray.md",
        "text": "Returns a subarray of the given array starting at the given index and having the specified length.\n\nUse `ArraySegment()` with the given array, `arr`, `start` and `length` to get the subarray.\nConvert the result to an array, using `ArraySegment.ToArray()`.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\n\npublic static partial class _30s \n{\n  public static T[] Subarray<T>(T[] arr, int start, int length) \n  {\n    return new ArraySegment<T>( arr, start, length ).ToArray();\n  }\n}",
          "example": "int[] nums = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n_30s.Subarray(nums,3,6); // {3, 4, 5, 6, 7, 8}"
        },
        "tags": [
          "array",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e1fc5d951242caf2217fc8a27e56b1fb31627387c262ad2ecf92f7e776b5e742",
        "firstSeen": "1577296269",
        "lastUpdated": "1578925388",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "Swap",
      "title": "Swap",
      "type": "snippet",
      "attributes": {
        "fileName": "Swap.md",
        "text": "Swaps the values of two variables of the same type.\n\nPass both values by reference using the `ref` keyword, then use a `temp` variable to swap their values.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static void Swap<T>(ref T val1, ref T val2) \n  {\n    var temp = val1;\n    val1 = val2;\n    val2 = temp;\n  }\n}",
          "example": "string a = \"Ipsum\";\nstring b = \"Lorem\";\n\n_30s.Swap(ref a, ref b); // a = \"Lorem\", b = \"Ipsum\""
        },
        "tags": [
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "2d5bdbcac62adf6fbd2b6b1cb9ff9cb290a0b148935906825558ee939d91033e",
        "firstSeen": "1576588339",
        "lastUpdated": "1578925388",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "SymmetricDifference",
      "title": "SymmetricDifference",
      "type": "snippet",
      "attributes": {
        "fileName": "SymmetricDifference.md",
        "text": "Returns the symmetric difference betweend two collections.\n\nUse `IEnumerable.Except()` to only return elements in one enumerable object and not the other.\nUse `IEnumerable.Union()` to combine the result of applying that to each object.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> SymmetricDifference<T>(IEnumerable<T> a, IEnumerable<T> b) \n  {\n    return a.Except(b).Union(b.Except(a));\n  }\n}",
          "example": "int[] a = { 1, 2, 3, 5 };\nint[] b = { 1, 2, 4 };\n\n_30s.SymmetricDifference(a, b); // { 3, 5, 4 }"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6ef0567350b29a10e3dd1d51de1658cea24cfdbf4ffda4dc3cf734491dbde99c",
        "firstSeen": "1577899917",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 3
      }
    },
    {
      "id": "Tail",
      "title": "Tail",
      "type": "snippet",
      "attributes": {
        "fileName": "Tail.md",
        "text": "Returns the tail of a collection.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Skip(1)` to get the whole object except for the first element.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\n\n",
        "codeBlocks": {
          "code": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static IEnumerable<T> Tail<T>(IEnumerable<T> list) \n  {\n    return list.Count() != 0 ? list.Skip(1) : default(IEnumerable<T>);\n  }\n}",
          "example": "List<int> nums = new List<int> { 1, 2, 3, 4, 5 };\nchar[] chars = {'A','B','C'};\n\n_30s.Tail(nums); // { 2, 3, 4, 5 }\n_30s.Tail(chars); // {'B','C'}"
        },
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "bde60478ea37c445f4101761a3eb2591ba1e7289acdd0c0ad7ac429968322773",
        "firstSeen": "1577046323",
        "lastUpdated": "1578925388",
        "updateCount": 5,
        "authorCount": 4
      }
    },
    {
      "id": "ToCamelCase",
      "title": "ToCamelCase",
      "type": "snippet",
      "attributes": {
        "fileName": "ToCamelCase.md",
        "text": "Converts a string to camel case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding ` ` as a separator.\nUse `CultureInfo.TextInfo.ToTitleCase()` on the result to convert it to title case, `string.Replace()` with a regular expression to remove spaces afterwards.\nFinally, use `IEnumerable.Select()` on the result to convert the first character to lowercase and return a string from the result.\n\n",
        "codeBlocks": {
          "code": "using System.Globalization;\nusing System.Text.RegularExpressions;\nusing System.Linq;\n\npublic static partial class _30s \n{\n  public static string ToCamelCase(string str) \n  {\n    Regex pattern = new Regex(@\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\");\n    return new string(\n      new CultureInfo(\"en-US\", false)\n        .TextInfo\n        .ToTitleCase(\n          string.Join(\" \", pattern.Matches(str)).ToLower()\n        )\n        .Replace(@\" \", \"\")\n        .Select((x, i) => i == 0 ? char.ToLower(x) : x)\n        .ToArray()\n    );\n  }\n}",
          "example": "_30s.ToCamelCase(\"some_database_field_name\"); // \"someDatabaseFieldName\"\n_30s.ToCamelCase(\"Some label that needs to be title-cased\"); // \"someLabelThatNeedsToBeCamelized\"\n_30s.ToCamelCase(\"some-package-name\"); // \"somePackageName\"\n_30s.ToCamelCase(\"some-mixed_string with spaces_underscores-and-hyphens\"); // \"someMixedStringWithSpacesUnderscoresAndHyphens\""
        },
        "tags": [
          "string",
          "regex",
          "advanced"
        ]
      },
      "meta": {
        "hash": "1ed2b116e4ef91c18efa20197a2501079a60b8edc28f6c59e17da5f66e18e248",
        "firstSeen": "1578689810",
        "lastUpdated": "1578689810",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "ToKebabCase",
      "title": "ToKebabCase",
      "type": "snippet",
      "attributes": {
        "fileName": "ToKebabCase.md",
        "text": "Converts a string to kebab case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding `-` as a separator.\n\n",
        "codeBlocks": {
          "code": "using System.Text.RegularExpressions;\n\npublic static partial class _30s \n{\n  public static string ToKebabCase(string str) \n  {\n    Regex pattern = new Regex(@\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\");\n    return string.Join(\"-\", pattern.Matches(str)).ToLower();\n  }\n}",
          "example": "_30s.ToKebabCase(\"camelCase\"); // \"camel-case\"\n_30s.ToKebabCase(\"some text\"); // \"some-text\"\n_30s.ToKebabCase(\"some-mixed_string With spaces_underscores-and-hyphens\"); // \"some-mixed-string-with-spaces-underscores-and-hyphens\"\n_30s.ToKebabCase(\"AllThe-small Things\"); // \"all-the-small-things\""
        },
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8750ae8a68ab026e6493e50318cc48fc9c07d81b2bb3339e3dafe3f0d8d3024b",
        "firstSeen": "1578689800",
        "lastUpdated": "1578689800",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Tomorrow",
      "title": "Tomorrow",
      "type": "snippet",
      "attributes": {
        "fileName": "Tomorrow.md",
        "text": "Returns tomorrow's `DateTime` value.\n\nUse `DateTime.Now` to get the current date, then use `DateTime.AddDays(1)` to increment by `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime Tomorrow() \n  {\n    return DateTime.Now.AddDays(1);\n  }\n}",
          "example": "_30s.Tomorrow(); // 12/22/2019 11:00:49 AM (if it's 12/21/2019 11:00:49 AM)"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8e45c27d173cec524bf003c180a9dff03dc99b7533402c1abdca717cdc23eb17",
        "firstSeen": "1576572220",
        "lastUpdated": "1576572220",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "ToSnakeCase",
      "title": "ToSnakeCase",
      "type": "snippet",
      "attributes": {
        "fileName": "ToSnakeCase.md",
        "text": "Converts a string to snake case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding `_` as a separator.\n\n",
        "codeBlocks": {
          "code": "using System.Text.RegularExpressions;\n\npublic static partial class _30s \n{\n  public static string ToSnakeCase(string str) \n  {\n    Regex pattern = new Regex(@\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\");\n    return string.Join(\"_\", pattern.Matches(str)).ToLower();\n  }\n}",
          "example": "_30s.ToSnakeCase(\"camelCase\"); // \"camel_case\"\n_30s.ToSnakeCase(\"some text\"); // \"some_text\"\n_30s.ToSnakeCase(\"some-mixed_string With spaces_underscores-and-hyphens\"); // \"some_mixed_string_with_spaces_underscores_and_hyphens\"\n_30s.ToSnakeCase(\"AllThe-small Things\"); // \"all_the_small_things\""
        },
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "56e188de5ce8889cd048f9e9f68231c9b4630ac25e2002860aa1f7f9bd1598c0",
        "firstSeen": "1578689789",
        "lastUpdated": "1578689789",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "ToTitleCase",
      "title": "ToTitleCase",
      "type": "snippet",
      "attributes": {
        "fileName": "ToTitleCase.md",
        "text": "Converts a string to title case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding ` ` as a separator.\nUse `CultureInfo.TextInfo.ToTitleCase()` on the result to convert it to title case.\n\n",
        "codeBlocks": {
          "code": "using System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic static partial class _30s \n{\n  public static string ToTitleCase(string str) \n  {\n    Regex pattern = new Regex(@\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\");\n    return new CultureInfo(\"en-US\", false)\n      .TextInfo\n      .ToTitleCase(\n        string.Join(\" \", pattern.Matches(str)).ToLower()\n      );\n  }\n}",
          "example": "_30s.ToTitleCase(\"some_database_field_name\"); // \"Some Database Field Name\"\n_30s.ToTitleCase(\"Some label that needs to be title-cased\"); // \"Some Label That Needs To Be Title Cased\"\n_30s.ToTitleCase(\"some-package-name\"); // \"Some Package Name\"\n_30s.ToTitleCase(\"some-mixed_string with spaces_underscores-and-hyphens\"); // \"Some Mixed String With Spaces Underscores And Hyphens\""
        },
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "6ebf93f81928199d97d7fd755309b5199e213e0084d14acd61c4689e35a26b2c",
        "firstSeen": "1578689783",
        "lastUpdated": "1578689783",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "Yesterday",
      "title": "Yesterday",
      "type": "snippet",
      "attributes": {
        "fileName": "Yesterday.md",
        "text": "Returns yesterday's `DateTime` value.\n\nUse `DateTime.Now` to get the current date, then use `DateTime.AddDays(-1)` to decrement by `1`.\n\n",
        "codeBlocks": {
          "code": "public static partial class _30s \n{\n  public static DateTime Yesterday() \n  {\n    return DateTime.Now.AddDays(-1);\n  }\n}",
          "example": "_30s.Yesterday(); // 12/20/2019 11:00:49 AM (if it's 12/21/2019 11:00:49 AM)"
        },
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "01a571b15be333f136b4b28634ed1732688a9b2a4184d04ce9989c0ec30d7b44",
        "firstSeen": "1576572213",
        "lastUpdated": "1576572213",
        "updateCount": 2,
        "authorCount": 2
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetArray",
    "language": {
      "short": "csharp",
      "long": "C#"
    }
  }
}