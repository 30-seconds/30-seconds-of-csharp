{
  "data": [
    {
      "id": "All",
      "type": "snippetListing",
      "title": "All",
      "attributes": {
        "text": "Returns `true` if the provided predicate function returns `true` for all elements in a collection, `false` otherwise.\n\nUse `Array.TrueForAll()` to test if all elements in the collection return `true` based on the predicate function, `match`.\nOmit the predicate function, `match`, to use the overload that checks if each value is different from `null` by default.\n\n",
        "tags": [
          "array",
          "lambda",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9f49ae6a8de2ddb83806e74ec242b56c6b90fe9ee84c49d12b7585fc6abe9474"
      }
    },
    {
      "id": "AverageBy",
      "type": "snippetListing",
      "title": "AverageBy",
      "attributes": {
        "text": "Returns the average of an `IEnumerable`, after mapping each element to a value using the provided function.\n\nUse `IEnumerable.Select()` to map each element to the value returned by the provided selector function, `fn`.\nUse `IEnumerable.Average()` to get the average of the resulting values.\n\n",
        "tags": [
          "math",
          "list",
          "array",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "6140561e57f7bf1b16c65ca4d839b7d4dcd0a645c01f5bde94d4bafd96f68b45"
      }
    },
    {
      "id": "Bifurcate",
      "type": "snippetListing",
      "title": "Bifurcate",
      "attributes": {
        "text": "Splits values into two groups. \nIf an element in `filter` is `true`, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.\n\nUse `IEnumerable.Where()` to separate values into two groups and assign them to the two passed `out` arrays.\n\n",
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9fe4ed1ea98f4fba8fec43fc419c68ade61b067660ab13ac67767daa7389d86f"
      }
    },
    {
      "id": "BifurcateBy",
      "type": "snippetListing",
      "title": "BifurcateBy",
      "attributes": {
        "text": "Splits values into two groups according to a predicate function, which specifies which group an element in the input collection belongs to. \nIf the predicate function returns a truthy value, the collection element belongs to the first group; otherwise, it belongs to the second group.\n\nUse `IEnumerable.Where()` to separate values into two groups and assign them to the two passed `out` arrays.\n\n",
        "tags": [
          "array",
          "list",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "c8ca5fff72ff7c76108c4e101393bf763e8ca304cc54f93b0172576b7a3fd492"
      }
    },
    {
      "id": "ByteArrayToHex",
      "type": "snippetListing",
      "title": "ByteArrayToHex",
      "attributes": {
        "text": "Converts a `byte` array to its hexadecimal string representation.\n\nUse `BitConverter.ToString()` to convert the `byte` array to a string.\nUse `string.Replace()` to remove dashes in the produced string.\n\n",
        "tags": [
          "array",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "67fb03f80d82f6737e6f9a44bc271f4b10e4661f03ee9f95be249da0f09e1820"
      }
    },
    {
      "id": "Capitalize",
      "type": "snippetListing",
      "title": "Capitalize",
      "attributes": {
        "text": "Capitalizes the first letter of a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `chars`.\nUse `char.ToUpper(chars[0])` to capitalize the first letter.\nFinally, return a `new string()` from the `chars` array.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6e6736b4336748ddfc57d973b0fd51a0e0fff079aaae5684ba4597a08ea362f4"
      }
    },
    {
      "id": "Chunk",
      "type": "snippetListing",
      "title": "Chunk",
      "attributes": {
        "text": "Chunks an array into smaller arrays of a specified size.\n\nUse `IEnumerable.Select()` to convert the given list to index-value pairs.\nUse `IEnumerable.GroupBy()` to split elements into groups based on their index.\nUse `IEnumerable.Select()` a second time to map each group's elements to their values and `IEnumerable.ToList()` to convert the result to a list.\nFinally, use `IEnumerable.ToList()` on the result to convert everything to a list and return it.\nIf the original list can't be split evenly, the final chunk will contain the remaining elements.\n\n",
        "tags": [
          "list",
          "lambda",
          "advanced"
        ]
      },
      "meta": {
        "hash": "4b5e3410d1ad58102d284d69b135de6ab0d7a352a2af2a0325ccc44d06600c53"
      }
    },
    {
      "id": "CompactWhitespace",
      "type": "snippetListing",
      "title": "CompactWhitespace",
      "attributes": {
        "text": "Returns a string with whitespaces compacted.\n\nUse `Regex.Replace()` with a regular expression to replace all occurences of 2 or more subsequent whitespace characters with a single space.\n\n",
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "598628d7d76e067aa9ac395263c2851d1190c2c4d5c274f45beb499b0f411602"
      }
    },
    {
      "id": "CountOccurences",
      "type": "snippetListing",
      "title": "CountOccurences",
      "attributes": {
        "text": "Counts the occurences of a value in an `IEnumerable`.\n\nUse `IEnumerable.Count()` in combination with `EqualityComparer<T>.Default.Equals()` to compare each value in the `IEnumerable` with `el`.\n\n",
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e416d30956587c04825689ab69a33d68fc2690fe2f422debf9fc892e770d7c3b"
      }
    },
    {
      "id": "DayOfTheWeek",
      "type": "snippetListing",
      "title": "DayOfTheWeek",
      "attributes": {
        "text": "Returns the string representation of the weekday for the given `DateTime`.\n\nUse `DateTime.ToString()` with an appropriate format modifier to return the day of the week.\n\n",
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "7cb211a7085714f4e5d405c793a10c5410ea1db6ae29ad57a0eea5b4f65032de"
      }
    },
    {
      "id": "Decapitalize",
      "type": "snippetListing",
      "title": "Decapitalize",
      "attributes": {
        "text": "Decapitalizes the first letter of a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `chars`.\nUse `char.ToLower(chars[0])` to decapitalize the first letter.\nFinally, return a `new string()` from the `chars` array.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6e0f3b18da2fa4e3eec6de9d45e8889b5af803ff36c4e3a85b37d9dafaa36be7"
      }
    },
    {
      "id": "Difference",
      "type": "snippetListing",
      "title": "Difference",
      "attributes": {
        "text": "Returns the difference betweend two `IEnumerable`s.\n\nUse `IEnumerable.Except()` to only return elements in the second enumerable object and not the first one.\n\n",
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "46b6d3a3e03f63071feae41cb1a17c24256070d762ec208567c50917517f1785"
      }
    },
    {
      "id": "DistinctValues",
      "type": "snippetListing",
      "title": "DistinctValues",
      "attributes": {
        "text": "Returns all distinct values in an array.\n\nUse `Enumerable.Distinct()` to get the distinct values in the given array.\nUse `Enumerable.ToArray()` to convert the result to an array and return it.\n\n",
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "23d7f6b38ecde3077fb22e65a2aa77642c3dfdb0b8e4e6571f544fe5015155fb"
      }
    },
    {
      "id": "DuplicateValues",
      "type": "snippetListing",
      "title": "DuplicateValues",
      "attributes": {
        "text": "Returns all distinct values in an `IEnumerable`.\n\nUse `IEnumerable.GroupBy()` to create groups for each distinct value in the enumerable.\nUse `IEnumerable.Where()` to create select only the groups with a count greater than `1`.\nUse `IEnumerable.Select()` to return the `Key` property of each group.\n\n",
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b38a89668fec6cde8e3a2600c69974aeb003dc86bdff6f3e2a7c90078ed10e09"
      }
    },
    {
      "id": "Fibonacci",
      "type": "snippetListing",
      "title": "Fibonacci",
      "attributes": {
        "text": "Generates an array, containing the Fibonacci sequence, up until the nth term.\n\nStarting with `0` and `1`, loop from `2` through `n` adding the sum of the last two numbers and appending to the sequence.\nIf `n` is less or equal to `0`, return a list containing `0`.\n\n",
        "tags": [
          "math",
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "99369a3e23e7f70853b4c5519e407e89beda8f9365588564112dd0b3453b627f"
      }
    },
    {
      "id": "FilterString",
      "type": "snippetListing",
      "title": "FilterString",
      "attributes": {
        "text": "Filter a string's contents to include only alphanumeric and allowed characters.\n\nUse `string.ToCharArray()` in combination with `Array.FindAll()` to check if each character in the string is alphanumeric or contained in the `filter`.\nOmit the second argument, `filter`, to only allow alphanumeric characters.\n\n",
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "06cfb76e42df33a38a44ef4e2f232a5b4bb019afb25298d9428d4db935beb84f"
      }
    },
    {
      "id": "FindIndexOfAll",
      "type": "snippetListing",
      "title": "FindIndexOfAll",
      "attributes": {
        "text": "Returns all indices in an `IList` that match the given predicate function, `match`.\n\nUse `Enumerable.Range()` to iterate over all indices in `data`.\nUse `IEnumerable.Where()` to filter out all values in `data` for which `match` returns `false` and return only matching indices.\n\n",
        "tags": [
          "array",
          "list",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "44b16b26051594c284b048330167da876bec316c2d63fc9edac5c251121bc96e"
      }
    },
    {
      "id": "FindParityOutliers",
      "type": "snippetListing",
      "title": "FindParityOutliers",
      "attributes": {
        "text": "Given an `IEnumerable`, returns the items that are parity outliers.\n\nUse `IEnumerable.GroupBy()` to create groups for each parity (`0` and `1`).\nUse `IEnumerable.OrderBy()` in combination with `Enumerable.Count()` to order the two groups in ascending order based on frequency.\nUse `IEnumerable.First()` to get the first element and return its `Key` property, which corresponds to the least common parity value.\nFinally, use `IEnumerable.Where()` to get all elements with the least common parity value.\n\n",
        "tags": [
          "array",
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "743880a305f4e310ebe1f9066bd5b712c5fe0e0445a5cc14281285913a53938e"
      }
    },
    {
      "id": "Flatten",
      "type": "snippetListing",
      "title": "Flatten",
      "attributes": {
        "text": "Flattens a 2D `IEnumerable` into a single dimension.\n\nUse `IEnumerable.SelectMany()` to flatten the 2D enumerable object.\n\n",
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e67ddb79ac9e8ba4ecf0a092914f6372db9a2e84e1f1d51d467b6c73e85ea47e"
      }
    },
    {
      "id": "FormatDuration",
      "type": "snippetListing",
      "title": "FormatDuration",
      "attributes": {
        "text": "Returns the human readable format of the given number of seconds.\n\nUse `TimeSpan.FromSeconds()` to convert the number of `seconds` to a `TimeSpan` object.\nUse `TimeSpan.ToString()` with an appropriate format specifier to return a human readable string of the value.\n\n",
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ce80ceea60396be86ca2feb5986264436dd566bd04851656d310f3dd4462af94"
      }
    },
    {
      "id": "GCD",
      "type": "snippetListing",
      "title": "GCD",
      "attributes": {
        "text": "Calculates the greatest common divisor of the given numbers.\n\nDefine a `GCD()` function for two numbers, which uses recursion.\nBase case is when `y` equals `0`, which returns `x`.\nOtherwise the GCD of `y` and the remainder of the division `x/y` is returned.\nDefine an overload that accepts multiple numbers or an array and use `Enumerable.Aggregate()` to apply `GCD()` to them.\n\n",
        "tags": [
          "math",
          "recursion",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "663b772ad09cb136533ccdcf8575185260e8df7fb94dd67e6c7a75f942baded2"
      }
    },
    {
      "id": "GetFirstN",
      "type": "snippetListing",
      "title": "GetFirstN",
      "attributes": {
        "text": "Returns the first `n` elements in an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Take(n)` to get the first `n` elements.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\nOmit the second argument, `n`, to use a default value of `1`.\n\n",
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c00408502f5bd2f067727d0ab68cded73200c0c64c68b096c0e94eb61795592d"
      }
    },
    {
      "id": "GetLastN",
      "type": "snippetListing",
      "title": "GetLastN",
      "attributes": {
        "text": "Returns the last `n` elements in an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Skip(list.Count() - n)` to get the last `n` elements.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\nOmit the second argument, `n`, to use a default value of `1`.\n\n",
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8578add19a89ab0c15c79a6030f687362fccca235f86b05393cc673d8c145bf4"
      }
    },
    {
      "id": "GetType",
      "type": "snippetListing",
      "title": "GetType",
      "attributes": {
        "text": "Returns the type of the given object.\n\nUse `typeof()` on the given object's type.\n\n",
        "tags": [
          "utility",
          "type",
          "beginner"
        ]
      },
      "meta": {
        "hash": "229825e3b5d2a4ffd29cb3adc18aa2d51a8eb10c037eb28a6632fef89105c941"
      }
    },
    {
      "id": "Head",
      "type": "snippetListing",
      "title": "Head",
      "attributes": {
        "text": "Returns the head of an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Take(1)` to get the first element, `IEnumerable.ToArray()[0]` to convert to array and return the element.\nIf the enumerable object is empty, return the `default()` value for the given type.\n\n",
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "014c9c4ff5672a67a24dc3096071ecc9441a85c9a16bf3eac6fa5ebdf3097ef1"
      }
    },
    {
      "id": "HexToByteArray",
      "type": "snippetListing",
      "title": "HexToByteArray",
      "attributes": {
        "text": "Converts a hexadecimal string to a `byte` array.\n\nUse `Enumerable.Range()` in combination with `string.Length` to get the indices of the given string in an array.\nUse `Enumerable.Where()` to get only the even indices in the previous range.\nUse `Enumerable.Select()` in combination with `Convert.ToByte()` and `string.Substring()` to convert each byte's hex code to a `byte`.\nFinally, use `Enumerable.ToArray()` to return a `byte[]`.\n\n",
        "tags": [
          "string",
          "utility",
          "advanced"
        ]
      },
      "meta": {
        "hash": "804a476d856f46835e8d5fa36c3b799e8b483679cf514f1d967e319ff47187f8"
      }
    },
    {
      "id": "IndexOfAll",
      "type": "snippetListing",
      "title": "IndexOfAll",
      "attributes": {
        "text": "Returns all indices of `n` in an `IList`.\n\nUse `Enumerable.Range()` to iterate over all indices in `data`.\nUse `IEnumerable.Where()` in combination with `object.Equals()` to compare each value in `data` to `n` and return only matching indices.\n\n",
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "319f736b56e445dcea90ed9b1417ed5f1a24320fb9a7d414165779859d7176fb"
      }
    },
    {
      "id": "Initialize2DArray",
      "type": "snippetListing",
      "title": "Initialize2DArray",
      "attributes": {
        "text": "Initializes a 2D array of the given width, height and value.\n\nUse `Enumerable.Repeat()` to repeat `value` `width` times, convert to an array and repeat `height` times using the same method.\nUse `IEnumerable.Select()` and `IEnumerable.First()` to convert the jagged array to a 2D array.\n\n",
        "tags": [
          "array",
          "utility",
          "advanced"
        ]
      },
      "meta": {
        "hash": "db9f2c7e764584ee9f1fc568aadeb80552f1f805e5a88fae4232e8dd0e9becc5"
      }
    },
    {
      "id": "IsA",
      "type": "snippetListing",
      "title": "IsA",
      "attributes": {
        "text": "Returns `true` if the given object is of the specified type, `false` otherwise.\n\nUse the `is` operator to check if `obj` is of the given type, `T`.\n\n",
        "tags": [
          "utility",
          "type",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c45f870ccfad72b8183ef726d10a590534b2f54632293cc87fb287edab74ae49"
      }
    },
    {
      "id": "IsDivisible",
      "type": "snippetListing",
      "title": "IsDivisible",
      "attributes": {
        "text": "Checks if the first numeric argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c873bd95a37f8ef96f4c136e920c68c739a88e6e9a5843e01cf6d6b240a2f9fe"
      }
    },
    {
      "id": "IsDouble",
      "type": "snippetListing",
      "title": "IsDouble",
      "attributes": {
        "text": "Returns `true` if the given string can be parsed into a double, `false` otherwise.\n\nReturn the result of calling `Double.TryParse()` with `NymberStyles.Float` for the given `num` string.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3530856a37d6fb0acc65d1de4bc828ea24d53b940ff9f28b4006fa7441c6faa2"
      }
    },
    {
      "id": "IsEven",
      "type": "snippetListing",
      "title": "IsEven",
      "attributes": {
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nCheck whether a number is odd or even using the modulo (`%`) operator. \nReturn `true` if the number is even, `false` if the number is odd.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0fb0bbb194f88b79f53b4a8964d736c44652230b2883f79543bd15dd5046f5d4"
      }
    },
    {
      "id": "IsInteger",
      "type": "snippetListing",
      "title": "IsInteger",
      "attributes": {
        "text": "Returns `true` if the given string can be parsed into an integer, `false` otherwise.\n\nReturn the result of calling `Double.TryParse()` with `NymberStyles.Integer` for the given `num` string.\nUse `Double.TryParse()` to allow handling of values larger than `Int64`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b752affac449857bd894dd1915ad32a7b19a13838ea49b59c041c6f688d567b6"
      }
    },
    {
      "id": "IsLower",
      "type": "snippetListing",
      "title": "IsLower",
      "attributes": {
        "text": "Checks if a string is lower case.\n\nConvert the given string to lower case, using  `string.ToLower()`  and compare it to the original.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "582ff53b416153491e8d1a232df377db1645898221f7aa6e393ca53812dcb520"
      }
    },
    {
      "id": "IsNotA",
      "type": "snippetListing",
      "title": "IsNotA",
      "attributes": {
        "text": "Returns `true` if the given object is not of the specified type, `false` otherwise.\n\nUse the `is` operator to check if `obj` is not of the given type, `T`.\n\n",
        "tags": [
          "utility",
          "type",
          "beginner"
        ]
      },
      "meta": {
        "hash": "487de7b23d77d6e5a69146b3fae37aae2279feea62d8b84635634e490f2d1574"
      }
    },
    {
      "id": "IsOdd",
      "type": "snippetListing",
      "title": "IsOdd",
      "attributes": {
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nCheck whether a number is odd or even using the modulo (`%`) operator. \nReturn `true` if the number is odd, `false` if the number is even.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "7dbbfda067d1608174382eacc2eee2c20d72297c5e550aeb3d0b5beff9061cf6"
      }
    },
    {
      "id": "IsPowerOfTwo",
      "type": "snippetListing",
      "title": "IsPowerOfTwo",
      "attributes": {
        "text": "Returns `true` if the given number is a power of `2`, `false` otherwise.\n\nUse the bitwise binary AND operator (`&`) to determine if `n` is a power of `2`.\nAdditionally, check that `n` is different from `0`.\n\n",
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "846ab17bd92f8f1190e2bcd8fe5ba877fe3303b0a7bee9c152c4abf2d4022e00"
      }
    },
    {
      "id": "IsUpper",
      "type": "snippetListing",
      "title": "IsUpper",
      "attributes": {
        "text": "Checks if a string is upper case.\n\nConvert the given string to upper case, using  `string.ToUpper()`  and compare it to the original.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "bfa98b57cc893e34cb499fc3bce305a26f2925a067f940359c1b158e2fb35f44"
      }
    },
    {
      "id": "IsWeekday",
      "type": "snippetListing",
      "title": "IsWeekday",
      "attributes": {
        "text": "Returns `true` if the given `DateTime` is a weekday, `false` otherwise.\n\nUse `DateTime.DayOfWeek` to check if the given `DateTime` is not a Saturday or Sunday.\n\n",
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0c6131c265188dc595d5f03d2b82951a985ba8d940288b0a364ff22fc5b1c017"
      }
    },
    {
      "id": "IsWeekend",
      "type": "snippetListing",
      "title": "IsWeekend",
      "attributes": {
        "text": "Returns `true` if the given `DateTime` is a not weekday, `false` otherwise.\n\nUse `DateTime.DayOfWeek` to check if the given `DateTime` is a Saturday or Sunday.\n\n",
        "tags": [
          "date",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5fc6d1b86f5f811617eefb0e0bd86cadcfad59b3e43b312832e67bb1cc7d0bb4"
      }
    },
    {
      "id": "KeepUpToN",
      "type": "snippetListing",
      "title": "KeepUpToN",
      "attributes": {
        "text": "Filters an `IEnumerable` keeping up to `n` occurences of each value.\n\nUse `IEnumerable.Distinct()` in combination with `IEnumerable.ToDictionary()` to create a dictionary with an initial count of `0` for each distinct value in `data`.\nUse `IEnumerable.Where()` to filter out occurences after the `n`th one for each element, using the previously created dictionary.\n\n",
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "10ba7fc64a93b12c76b3ae98cca28ece42be888d4e4cda45a2d9f1bcdbf45f4a"
      }
    },
    {
      "id": "LCM",
      "type": "snippetListing",
      "title": "LCM",
      "attributes": {
        "text": "Calculates the least common multiple of the given numbers.\n\nDefine a `_GCD()` method that determines the greatest common divisor, using recursion.\nUse `_GCD()` and the fact that `LCM(x, y) = x * y / GCD(x,y)` to determine the least common multiple.\nUse `Enumerable.Aggregate()` to apply `LCM()` to all the given arguments.\n\n",
        "tags": [
          "math",
          "recursion",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "0b43be4b8b7f5cdb2cabdb7d87422f5c2a1e0c37439678ce282309429b50128a"
      }
    },
    {
      "id": "Mask",
      "type": "snippetListing",
      "title": "Mask",
      "attributes": {
        "text": "Replaces all but the last `n` characters in a string with the specified `mask` character.\n\nUse `string.Substring()` to get the last `n` characters of the passed string, `str`.\nUse `string.PadLeft()` to add as many `mask` characters as necessary to the start of the string to return a string of the same length.\nOmit the third argument, `mask`, to use a default character of `'*'`.\nOmit the second argument, `n`, to keep a default of `4` characters unmasked.\n\n",
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9c469a03a2325eba95f39d919a8e4a0cbe7e5e6d849e772067368e04f4d4a425"
      }
    },
    {
      "id": "MaxBy",
      "type": "snippetListing",
      "title": "MaxBy",
      "attributes": {
        "text": "Returns the maximum of an `IEnumerable`, after mapping each element to a value using the provided function.\n\nUse `IEnumerable.Select()` to map each element to the value returned by the provided selector function, `fn`.\nUse `IEnumerable.Max()` to get the maximum of the resulting values.\n\n",
        "tags": [
          "math",
          "list",
          "array",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b812f6649954eb1e53641a13cf9418410474b3286444b4be8aad91b578efa45c"
      }
    },
    {
      "id": "MaxDateTime",
      "type": "snippetListing",
      "title": "MaxDateTime",
      "attributes": {
        "text": "Returns the maximum of two `DateTime` values.\n\nUse the conditional operator (`?:`) to return the maximum of the two values.\n\n",
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8052e3922028cb52cc0737402a13b27a277587374c00fe928bc379dd0489ce97"
      }
    },
    {
      "id": "Median",
      "type": "snippetListing",
      "title": "Median",
      "attributes": {
        "text": "Finds the median of a list of numbers.\n\nUse the `params` keyword to accept either an array or a variable number of arguments.\nSort the array using `Array.sort()` and find the median. \nWhich is either the middle element of the list, if the list length is odd or the average of the two middle elements, if the list length is even.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "36ad6e587f9de3d589119ea0dc61c59c490a88caab192e8da895ada709f20684"
      }
    },
    {
      "id": "MinBy",
      "type": "snippetListing",
      "title": "MinBy",
      "attributes": {
        "text": "Returns the minimum of an `IEnumerable`, after mapping each element to a value using the provided function.\n\nUse `IEnumerable.Select()` to map each element to the value returned by the provided selector function, `fn`.\nUse `IEnumerable.Min()` to get the minimum of the resulting values.\n\n",
        "tags": [
          "math",
          "list",
          "array",
          "lambda",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "a2dd63035f6b8ca7a40146283c0ed56aa1e65ae808a5a7ecf80c152a99280ca6"
      }
    },
    {
      "id": "MinDateTime",
      "type": "snippetListing",
      "title": "MinDateTime",
      "attributes": {
        "text": "Returns the minimum of two `DateTime` values.\n\nUse the conditional operator (`?:`) to return the minimum of the two values.\n\n",
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c39e58af84153f01abf9f57262cd67d2431cc553399eb360e9b0741261c58a93"
      }
    },
    {
      "id": "MostFrequent",
      "type": "snippetListing",
      "title": "MostFrequent",
      "attributes": {
        "text": "Returns the most frequent element of an `IEnumerable`.\n\nUse `IEnumerable.GroupBy()` to group `values` by value.\nUse `IEnumerable.OrderByDescending()` in combination with `Enumerable.Count()` to order the results in descending order based on frequency.\nUse `IEnumerable.First()` to get the first element and return its `Key` property, which corresponds to the element's value.\n\n",
        "tags": [
          "array",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "f55d7e9928ecf8a4a1bdcea0da1cc65e1c8fa241996134b077dcaf1a014d0da9"
      }
    },
    {
      "id": "None",
      "type": "snippetListing",
      "title": "None",
      "attributes": {
        "text": "Returns `true` if the provided predicate function returns `false` for all elements in a collection, `false` otherwise.\n\nUse `Array.Exists()` to test if all elements in the collection return `false` based on the predicate function, `match`.\nOmit the predicate function, `match`, to use the overload that checks if each value is `null` by default.\n\n",
        "tags": [
          "array",
          "lambda",
          "overload",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "994047b6fd9870caad610175b8ae89543eaa6b4e1527a6db189f24eb93927784"
      }
    },
    {
      "id": "PadNumber",
      "type": "snippetListing",
      "title": "PadNumber",
      "attributes": {
        "text": "Pads a given number to the specified `length`.\n\nUse `Int32.ToString()` with an appropriate format specifier, produced using string interpolation.\n\n",
        "tags": [
          "string",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8d7933f298a3879af003418959a66b5d9352170e60db91c3f60c9383e1947ede"
      }
    },
    {
      "id": "RandomDoubleInRange",
      "type": "snippetListing",
      "title": "RandomDoubleInRange",
      "attributes": {
        "text": "Returns a random double in the specified range.\n\nUse `Random.NextDouble()` to generate a random value and map it to the desired range using multiplication.\n\n",
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5adcd7cd83ed3ed5a11b4726f8fd5613ff76faf5af7dbc7845541aaddbdcc446"
      }
    },
    {
      "id": "RandomIntegerInRange",
      "type": "snippetListing",
      "title": "RandomIntegerInRange",
      "attributes": {
        "text": "Returns a random integer in the specified range.\n\nUse `Random.Next()` to generate an integer in the desired range.\n\n",
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "9a3c55a7b319be95782949ed29297a326dae3cd0d2ce07167669108d92a4f149"
      }
    },
    {
      "id": "Repeat",
      "type": "snippetListing",
      "title": "Repeat",
      "attributes": {
        "text": "Creates a new string by repeating the given string `n` times.\n\nUse `Enumerable.Repeat()` to repeat `s` `n` times, `string.Concat()` to convert the result to a `string`.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "70e7982d16309005ea8218b60659eb2003dd9685b970dd17b257b9b885441be2"
      }
    },
    {
      "id": "Reverse",
      "type": "snippetListing",
      "title": "Reverse",
      "attributes": {
        "text": "Reverses a string.\n\nUse `string.ToCharArray()` to convert the string to an array of `char`, `Array.Reverse()` to reverse the array.\nUse `IEnumerable.ToArray()` to create an array of `char` and pass it to a `new string()`.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e79c14b00d42af188414b6a8642f62f4820e716927e2722181b01bb612184aaf"
      }
    },
    {
      "id": "Shuffle",
      "type": "snippetListing",
      "title": "Shuffle",
      "attributes": {
        "text": "Randomizes the order of the values of an `IList`, updating the original `IList` object.\n\nUse the [Fisher-Yates algorithm](\nhttps://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Fisher_and_Yates%27_original_method) to reorder the elements of the given `IList` object.\n\n",
        "tags": [
          "list",
          "array",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "787070230c11fcce2e124507fade7a887e048b3d696a201bf509d16921fa70e8"
      }
    },
    {
      "id": "SplitLines",
      "type": "snippetListing",
      "title": "SplitLines",
      "attributes": {
        "text": "Splits a multiline string into an array of lines.\n\nUse `string.Split()` with all forms of the newline separator to split the string into an array of strings.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c087d30e60ecacd0162674cef0d197a8dda8ef980c4268df031b2b3a8f8bb2dd"
      }
    },
    {
      "id": "SplitStringBy",
      "type": "snippetListing",
      "title": "SplitStringBy",
      "attributes": {
        "text": "Splits a string into an array of strings using a multicharacter (string) separator.\n\nUse `string.Split()` with the given `separator` to split the string into an array of strings.\n\n",
        "tags": [
          "string",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "85b5a86433c25b8a5c1d3429dde3a36c03f0cab77c489d9f30b6233d0e3aecad"
      }
    },
    {
      "id": "Stringify",
      "type": "snippetListing",
      "title": "Stringify",
      "attributes": {
        "text": "Combines the elements of an enumerable object into a string.\n\nUse `string.Join()` to combine all elements in the `IEnumerable` into a `string`, using `delimiter`.\nOmit the second argument, `delimiter`, to use the default delimiter of `\",\"`.\n\n",
        "tags": [
          "utility",
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "45df41ece158c680c9623ac822578976c526ce96a027f1d74bf62dbeddaecd7f"
      }
    },
    {
      "id": "Subarray",
      "type": "snippetListing",
      "title": "Subarray",
      "attributes": {
        "text": "Returns a subarray of the given array starting at the given index and having the specified length.\n\nUse `ArraySegment()` with the given array, `arr`, `start` and `length` to get the subarray.\nConvert the result to an array, using `ArraySegment.ToArray()`.\n\n",
        "tags": [
          "array",
          "beginner"
        ]
      },
      "meta": {
        "hash": "9d3d9ac579ead5497ce7230af2374446035dcdbcdd86e6720a4a066cdab59331"
      }
    },
    {
      "id": "Swap",
      "type": "snippetListing",
      "title": "Swap",
      "attributes": {
        "text": "Swaps the values of two variables of the same type.\n\nPass both values by reference using the `ref` keyword, then use a `temp` variable to swap their values.\n\n",
        "tags": [
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "22bf5dfd734ebeea4868687cf82f7f63e612a95b95372abd37d7e76df04132d4"
      }
    },
    {
      "id": "SymmetricDifference",
      "type": "snippetListing",
      "title": "SymmetricDifference",
      "attributes": {
        "text": "Returns the symmetric difference betweend two `IEnumerable`s.\n\nUse `IEnumerable.Except()` to only return elements in one enumerable object and not the other.\nUse `IEnumerable.Union()` to combine the result of applying that to each object.\n\n",
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "897e3dc5a4f926679248175024eb56db619c53d365ca83f44f0ce8e5133d813f"
      }
    },
    {
      "id": "Tail",
      "type": "snippetListing",
      "title": "Tail",
      "attributes": {
        "text": "Returns the tail of an `IEnumerable`.\n\nUse `IEnumerable.Count()` to check if the enumerable is non-empty.\nUse `IEnumerable.Skip(1)` to get the whole object except for the first element.\nIf the enumerable object is empty, return the `default()` value for the given enumerable.\n\n",
        "tags": [
          "array",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f706c3ae89aac3d3605dcbaec88f05df0307e39dccbf52c253a7bde1f810bb41"
      }
    },
    {
      "id": "ToCamelCase",
      "type": "snippetListing",
      "title": "ToCamelCase",
      "attributes": {
        "text": "Converts a string to camel case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding ` ` as a separator.\nUse `CultureInfo.TextInfo.ToTitleCase()` on the result to convert it to title case, `string.Replace()` with a regular expression to remove spaces afterwards.\nFinally, use `IEnumerable.Select()` on the result to convert the first character to lowercase and return a string from the result.\n\n",
        "tags": [
          "string",
          "regex",
          "advanced"
        ]
      },
      "meta": {
        "hash": "1ed2b116e4ef91c18efa20197a2501079a60b8edc28f6c59e17da5f66e18e248"
      }
    },
    {
      "id": "ToKebabCase",
      "type": "snippetListing",
      "title": "ToKebabCase",
      "attributes": {
        "text": "Converts a string to kebab case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding `-` as a separator.\n\n",
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8750ae8a68ab026e6493e50318cc48fc9c07d81b2bb3339e3dafe3f0d8d3024b"
      }
    },
    {
      "id": "Tomorrow",
      "type": "snippetListing",
      "title": "Tomorrow",
      "attributes": {
        "text": "Returns tomorrow's `DateTime` value.\n\nUse `DateTime.Now` to get the current date, then use `DateTime.AddDays(1)` to increment by `1`.\n\n",
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8e45c27d173cec524bf003c180a9dff03dc99b7533402c1abdca717cdc23eb17"
      }
    },
    {
      "id": "ToSnakeCase",
      "type": "snippetListing",
      "title": "ToSnakeCase",
      "attributes": {
        "text": "Converts a string to snake case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding `_` as a separator.\n\n",
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "56e188de5ce8889cd048f9e9f68231c9b4630ac25e2002860aa1f7f9bd1598c0"
      }
    },
    {
      "id": "ToTitleCase",
      "type": "snippetListing",
      "title": "ToTitleCase",
      "attributes": {
        "text": "Converts a string to title case.\n\nUse `Regex.Matches()` with an appropriate regular expression to break the string into words.\nUse `string.Join()` and `string.ToLower()` to convert the words to lowercase and combine them adding ` ` as a separator.\nUse `CultureInfo.TextInfo.ToTitleCase()` on the result to convert it to title case.\n\n",
        "tags": [
          "string",
          "regex",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "6ebf93f81928199d97d7fd755309b5199e213e0084d14acd61c4689e35a26b2c"
      }
    },
    {
      "id": "Yesterday",
      "type": "snippetListing",
      "title": "Yesterday",
      "attributes": {
        "text": "Returns yesterday's `DateTime` value.\n\nUse `DateTime.Now` to get the current date, then use `DateTime.AddDays(-1)` to decrement by `1`.\n\n",
        "tags": [
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "01a571b15be333f136b4b28634ed1732688a9b2a4184d04ce9989c0ec30d7b44"
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetListingArray",
    "language": {
      "short": "csharp",
      "long": "C#"
    }
  }
}